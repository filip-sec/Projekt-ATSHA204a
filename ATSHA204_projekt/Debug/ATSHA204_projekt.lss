
ATSHA204_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b4  00800200  000015dc  00001670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  008004b4  008004b4  00001924  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035a2  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d2e  00000000  00000000  0000516a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a0e  00000000  00000000  00006e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000584  00000000  00000000  000088a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001136  00000000  00000000  00008e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f2f  00000000  00000000  00009f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000be91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	9f c0       	rjmp	.+318    	; 0x174 <__bad_interrupt>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	71 c0       	rjmp	.+226    	; 0x174 <__bad_interrupt>
      92:	00 00       	nop
      94:	6f c0       	rjmp	.+222    	; 0x174 <__bad_interrupt>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	65 c0       	rjmp	.+202    	; 0x174 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	14 e0       	ldi	r17, 0x04	; 4
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	ec ed       	ldi	r30, 0xDC	; 220
     14c:	f5 e1       	ldi	r31, 0x15	; 21
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a4 3b       	cpi	r26, 0xB4	; 180
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	24 e0       	ldi	r18, 0x04	; 4
     160:	a4 eb       	ldi	r26, 0xB4	; 180
     162:	b4 e0       	ldi	r27, 0x04	; 4
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	ab 3b       	cpi	r26, 0xBB	; 187
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	4e d5       	rcall	.+2716   	; 0xc0c <main>
     170:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <sha204c_calculate_crc>:
 *
 * \param[in] length number of bytes in buffer
 * \param[in] data pointer to data for which CRC should be calculated
 * \param[out] crc pointer to 16-bit CRC
 */
void sha204c_calculate_crc(uint8_t length, uint8_t *data, uint8_t *crc) {
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	eb 01       	movw	r28, r22
     180:	8a 01       	movw	r16, r20
	uint8_t counter;
	uint16_t crc_register = 0;
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t polynom = 0x8005;
	uint8_t shift_register;
	uint8_t data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	19 c0       	rjmp	.+50     	; 0x1bc <sha204c_calculate_crc+0x46>
	  for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
		 data_bit = (data[counter] & shift_register) ? 1 : 0;
     18a:	fe 01       	movw	r30, r28
     18c:	ea 0f       	add	r30, r26
     18e:	f1 1d       	adc	r31, r1
     190:	50 81       	ld	r21, Z
     192:	59 23       	and	r21, r25
     194:	71 e0       	ldi	r23, 0x01	; 1
     196:	09 f4       	brne	.+2      	; 0x19a <sha204c_calculate_crc+0x24>
     198:	70 e0       	ldi	r23, 0x00	; 0
		 crc_bit = crc_register >> 15;
     19a:	53 2f       	mov	r21, r19
     19c:	55 1f       	adc	r21, r21
     19e:	55 27       	eor	r21, r21
     1a0:	55 1f       	adc	r21, r21
		 crc_register <<= 1;
     1a2:	22 0f       	add	r18, r18
     1a4:	33 1f       	adc	r19, r19
		 if (data_bit != crc_bit)
     1a6:	75 17       	cp	r23, r21
     1a8:	19 f0       	breq	.+6      	; 0x1b0 <sha204c_calculate_crc+0x3a>
			crc_register ^= polynom;
     1aa:	45 e0       	ldi	r20, 0x05	; 5
     1ac:	24 27       	eor	r18, r20
     1ae:	30 58       	subi	r19, 0x80	; 128
	uint16_t polynom = 0x8005;
	uint8_t shift_register;
	uint8_t data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
	  for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
     1b0:	99 0f       	add	r25, r25
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <sha204c_calculate_crc+0x40>
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	91 11       	cpse	r25, r1
     1b8:	e8 cf       	rjmp	.-48     	; 0x18a <sha204c_calculate_crc+0x14>
	uint16_t crc_register = 0;
	uint16_t polynom = 0x8005;
	uint8_t shift_register;
	uint8_t data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
     1ba:	af 5f       	subi	r26, 0xFF	; 255
     1bc:	a8 17       	cp	r26, r24
     1be:	d0 f3       	brcs	.-12     	; 0x1b4 <sha204c_calculate_crc+0x3e>
		 crc_register <<= 1;
		 if (data_bit != crc_bit)
			crc_register ^= polynom;
	  }
	}
	crc[0] = (uint8_t) (crc_register & 0x00FF);
     1c0:	f8 01       	movw	r30, r16
     1c2:	20 83       	st	Z, r18
	crc[1] = (uint8_t) (crc_register >> 8);
     1c4:	31 83       	std	Z+1, r19	; 0x01
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	08 95       	ret

000001d0 <sha204c_check_crc>:
 *  \ingroup atsha204_communication
 * \param[in] response pointer to response
 * \return status of the consistency check
 */
uint8_t sha204c_check_crc(uint8_t *response)
{
     1d0:	ef 92       	push	r14
     1d2:	ff 92       	push	r15
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	1f 92       	push	r1
     1dc:	1f 92       	push	r1
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	7c 01       	movw	r14, r24
	uint8_t crc[SHA204_CRC_SIZE];
	uint8_t count = response[SHA204_BUFFER_POS_COUNT];
     1e4:	fc 01       	movw	r30, r24
     1e6:	80 81       	ld	r24, Z

	count -= SHA204_CRC_SIZE;
     1e8:	1e ef       	ldi	r17, 0xFE	; 254
     1ea:	18 0f       	add	r17, r24
	sha204c_calculate_crc(count, response, crc);
     1ec:	ae 01       	movw	r20, r28
     1ee:	4f 5f       	subi	r20, 0xFF	; 255
     1f0:	5f 4f       	sbci	r21, 0xFF	; 255
     1f2:	b7 01       	movw	r22, r14
     1f4:	81 2f       	mov	r24, r17
     1f6:	bf df       	rcall	.-130    	; 0x176 <sha204c_calculate_crc>

	return (crc[0] == response[count] && crc[1] == response[count + 1])
     1f8:	39 81       	ldd	r19, Y+1	; 0x01
     1fa:	81 2f       	mov	r24, r17
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	f7 01       	movw	r30, r14
     200:	e8 0f       	add	r30, r24
     202:	f9 1f       	adc	r31, r25
     204:	20 81       	ld	r18, Z
     206:	32 13       	cpse	r19, r18
     208:	09 c0       	rjmp	.+18     	; 0x21c <sha204c_check_crc+0x4c>
     20a:	2a 81       	ldd	r18, Y+2	; 0x02
     20c:	f7 01       	movw	r30, r14
     20e:	e8 0f       	add	r30, r24
     210:	f9 1f       	adc	r31, r25
     212:	81 81       	ldd	r24, Z+1	; 0x01
     214:	28 17       	cp	r18, r24
     216:	21 f0       	breq	.+8      	; 0x220 <sha204c_check_crc+0x50>
     218:	85 ee       	ldi	r24, 0xE5	; 229
     21a:	03 c0       	rjmp	.+6      	; 0x222 <sha204c_check_crc+0x52>
     21c:	85 ee       	ldi	r24, 0xE5	; 229
     21e:	01 c0       	rjmp	.+2      	; 0x222 <sha204c_check_crc+0x52>
     220:	80 e0       	ldi	r24, 0x00	; 0
		? SHA204_SUCCESS : SHA204_BAD_CRC;
}
     222:	0f 90       	pop	r0
     224:	0f 90       	pop	r0
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	1f 91       	pop	r17
     22c:	ff 90       	pop	r15
     22e:	ef 90       	pop	r14
     230:	08 95       	ret

00000232 <sha204c_wakeup>:
 *
 *  \param[out] response pointer to four-byte response
 *  \return status of the operation
 */
uint8_t sha204c_wakeup(uint8_t *response)
{
     232:	0f 93       	push	r16
     234:	1f 93       	push	r17
     236:	cf 93       	push	r28
     238:	8c 01       	movw	r16, r24
	uint8_t ret_code = sha204p_wakeup();
     23a:	e9 d2       	rcall	.+1490   	; 0x80e <sha204p_wakeup>
	if (ret_code != SHA204_SUCCESS)
     23c:	81 11       	cpse	r24, r1
     23e:	24 c0       	rjmp	.+72     	; 0x288 <sha204c_wakeup+0x56>
		return ret_code;

	ret_code = sha204p_receive_response(SHA204_RSP_SIZE_MIN, response);
     240:	b8 01       	movw	r22, r16
     242:	84 e0       	ldi	r24, 0x04	; 4
     244:	68 d3       	rcall	.+1744   	; 0x916 <sha204p_receive_response>
     246:	c8 2f       	mov	r28, r24
	if (ret_code != SHA204_SUCCESS)
     248:	81 11       	cpse	r24, r1
     24a:	1c c0       	rjmp	.+56     	; 0x284 <sha204c_wakeup+0x52>
		return ret_code;

	// Verify status response.
	if (response[SHA204_BUFFER_POS_COUNT] != SHA204_RSP_SIZE_MIN)
     24c:	f8 01       	movw	r30, r16
     24e:	80 81       	ld	r24, Z
     250:	84 30       	cpi	r24, 0x04	; 4
     252:	51 f4       	brne	.+20     	; 0x268 <sha204c_wakeup+0x36>
		ret_code = SHA204_INVALID_SIZE;
	else if (response[SHA204_BUFFER_POS_STATUS] != SHA204_STATUS_BYTE_WAKEUP)
     254:	81 81       	ldd	r24, Z+1	; 0x01
     256:	81 31       	cpi	r24, 0x11	; 17
     258:	49 f4       	brne	.+18     	; 0x26c <sha204c_wakeup+0x3a>
		ret_code = SHA204_COMM_FAIL;
	else {
		if ((response[SHA204_RSP_SIZE_MIN - SHA204_CRC_SIZE] != 0x33)
     25a:	82 81       	ldd	r24, Z+2	; 0x02
     25c:	83 33       	cpi	r24, 0x33	; 51
     25e:	41 f4       	brne	.+16     	; 0x270 <sha204c_wakeup+0x3e>
					|| (response[SHA204_RSP_SIZE_MIN + 1 - SHA204_CRC_SIZE] != 0x43))
     260:	83 81       	ldd	r24, Z+3	; 0x03
     262:	83 34       	cpi	r24, 0x43	; 67
     264:	39 f4       	brne	.+14     	; 0x274 <sha204c_wakeup+0x42>
     266:	07 c0       	rjmp	.+14     	; 0x276 <sha204c_wakeup+0x44>
	if (ret_code != SHA204_SUCCESS)
		return ret_code;

	// Verify status response.
	if (response[SHA204_BUFFER_POS_COUNT] != SHA204_RSP_SIZE_MIN)
		ret_code = SHA204_INVALID_SIZE;
     268:	c4 ee       	ldi	r28, 0xE4	; 228
     26a:	05 c0       	rjmp	.+10     	; 0x276 <sha204c_wakeup+0x44>
	else if (response[SHA204_BUFFER_POS_STATUS] != SHA204_STATUS_BYTE_WAKEUP)
		ret_code = SHA204_COMM_FAIL;
     26c:	c0 ef       	ldi	r28, 0xF0	; 240
     26e:	03 c0       	rjmp	.+6      	; 0x276 <sha204c_wakeup+0x44>
	else {
		if ((response[SHA204_RSP_SIZE_MIN - SHA204_CRC_SIZE] != 0x33)
					|| (response[SHA204_RSP_SIZE_MIN + 1 - SHA204_CRC_SIZE] != 0x43))
			ret_code = SHA204_BAD_CRC;
     270:	c5 ee       	ldi	r28, 0xE5	; 229
     272:	01 c0       	rjmp	.+2      	; 0x276 <sha204c_wakeup+0x44>
     274:	c5 ee       	ldi	r28, 0xE5	; 229
	}
	if (ret_code != SHA204_SUCCESS)
     276:	cc 23       	and	r28, r28
     278:	31 f0       	breq	.+12     	; 0x286 <sha204c_wakeup+0x54>
		delay_ms(SHA204_COMMAND_EXEC_MAX);
     27a:	86 e4       	ldi	r24, 0x46	; 70
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	a6 d3       	rcall	.+1868   	; 0x9cc <delay_ms>

	return ret_code;
     280:	8c 2f       	mov	r24, r28
     282:	02 c0       	rjmp	.+4      	; 0x288 <sha204c_wakeup+0x56>
     284:	01 c0       	rjmp	.+2      	; 0x288 <sha204c_wakeup+0x56>
     286:	8c 2f       	mov	r24, r28
}
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	08 95       	ret

00000290 <sha204c_resync>:
 * \param[in] size size of response buffer
 * \param[out] response pointer to Wake-up response buffer
 * \return status of the operation
 */
uint8_t sha204c_resync(uint8_t size, uint8_t *response)
{
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	eb 01       	movw	r28, r22
	// Try to re-synchronize without sending a Wake token
	// (step 1 of the re-synchronization process).
	uint8_t ret_code = sha204p_resync(size, response);
     296:	69 d3       	rcall	.+1746   	; 0x96a <sha204p_resync>
	if (ret_code == SHA204_SUCCESS)
     298:	88 23       	and	r24, r24
		return ret_code;

	// We lost communication. Send a Wake pulse and try
	// to receive a response (steps 2 and 3 of the
	// re-synchronization process).
	(void) sha204p_sleep();
     29a:	31 f0       	breq	.+12     	; 0x2a8 <sha204c_resync+0x18>
	ret_code = sha204c_wakeup(response);
     29c:	30 d3       	rcall	.+1632   	; 0x8fe <sha204p_sleep>
     29e:	ce 01       	movw	r24, r28
     2a0:	c8 df       	rcall	.-112    	; 0x232 <sha204c_wakeup>

	// Translate a return value of success into one
	// that indicates that the device had to be woken up
	// and might have lost its TempKey.
	return (ret_code == SHA204_SUCCESS ? SHA204_RESYNC_WITH_WAKEUP : ret_code);
     2a2:	81 11       	cpse	r24, r1
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <sha204c_resync+0x18>
     2a6:	88 ee       	ldi	r24, 0xE8	; 232
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <sha204c_send_and_receive>:
 * \param[in] execution_timeout polling timeout in ms
 * \return status of the operation
 */
uint8_t sha204c_send_and_receive(uint8_t *tx_buffer, uint8_t rx_size, uint8_t *rx_buffer,
			uint8_t execution_delay, uint8_t execution_timeout)
{
     2ae:	4f 92       	push	r4
     2b0:	5f 92       	push	r5
     2b2:	7f 92       	push	r7
     2b4:	8f 92       	push	r8
     2b6:	9f 92       	push	r9
     2b8:	af 92       	push	r10
     2ba:	bf 92       	push	r11
     2bc:	cf 92       	push	r12
     2be:	df 92       	push	r13
     2c0:	ef 92       	push	r14
     2c2:	ff 92       	push	r15
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	1f 92       	push	r1
     2ce:	1f 92       	push	r1
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	6c 01       	movw	r12, r24
     2d6:	b6 2e       	mov	r11, r22
     2d8:	7a 01       	movw	r14, r20
     2da:	82 2e       	mov	r8, r18
	uint8_t ret_code_resync;
	uint8_t n_retries_send;
	uint8_t n_retries_receive;
	uint8_t i;
	uint8_t status_byte;
	uint8_t count = tx_buffer[SHA204_BUFFER_POS_COUNT];
     2dc:	fc 01       	movw	r30, r24
     2de:	90 80       	ld	r9, Z
	uint8_t count_minus_crc = count - SHA204_CRC_SIZE;
     2e0:	8e ef       	ldi	r24, 0xFE	; 254
     2e2:	89 0d       	add	r24, r9
	uint16_t execution_timeout_us = (uint16_t) (execution_timeout * 1000) + SHA204_RESPONSE_TIMEOUT;
     2e4:	48 ee       	ldi	r20, 0xE8	; 232
     2e6:	53 e0       	ldi	r21, 0x03	; 3
     2e8:	04 9f       	mul	r16, r20
     2ea:	90 01       	movw	r18, r0
     2ec:	05 9f       	mul	r16, r21
     2ee:	30 0d       	add	r19, r0
     2f0:	11 24       	eor	r1, r1
     2f2:	29 01       	movw	r4, r18
     2f4:	f5 e2       	ldi	r31, 0x25	; 37
     2f6:	4f 0e       	add	r4, r31
     2f8:	51 1c       	adc	r5, r1
	volatile uint16_t timeout_countdown;

	// Append CRC.
	sha204c_calculate_crc(count_minus_crc, tx_buffer, tx_buffer + count_minus_crc);
     2fa:	a6 01       	movw	r20, r12
     2fc:	48 0f       	add	r20, r24
     2fe:	51 1d       	adc	r21, r1
     300:	b6 01       	movw	r22, r12
     302:	39 df       	rcall	.-398    	; 0x176 <sha204c_calculate_crc>

	// Retry loop for sending a command and receiving a response.
	n_retries_send = SHA204_RETRY_COUNT + 1;
     304:	82 e0       	ldi	r24, 0x02	; 2
 * \return status of the operation
 */
uint8_t sha204c_send_and_receive(uint8_t *tx_buffer, uint8_t rx_size, uint8_t *rx_buffer,
			uint8_t execution_delay, uint8_t execution_timeout)
{
	uint8_t ret_code = SHA204_FUNC_FAIL;
     306:	10 ee       	ldi	r17, 0xE0	; 224
	sha204c_calculate_crc(count_minus_crc, tx_buffer, tx_buffer + count_minus_crc);

	// Retry loop for sending a command and receiving a response.
	n_retries_send = SHA204_RETRY_COUNT + 1;

	while ((n_retries_send-- > 0) && (ret_code != SHA204_SUCCESS)) {
     308:	64 c0       	rjmp	.+200    	; 0x3d2 <sha204c_send_and_receive+0x124>

		// Send command.
		ret_code = sha204p_send_command(count, tx_buffer);
     30a:	b6 01       	movw	r22, r12
     30c:	89 2d       	mov	r24, r9
     30e:	f2 d2       	rcall	.+1508   	; 0x8f4 <sha204p_send_command>
     310:	18 2f       	mov	r17, r24
		if (ret_code != SHA204_SUCCESS) {
     312:	88 23       	and	r24, r24
     314:	39 f0       	breq	.+14     	; 0x324 <sha204c_send_and_receive+0x76>
			if (sha204c_resync(rx_size, rx_buffer) == SHA204_RX_NO_RESPONSE)
     316:	b7 01       	movw	r22, r14
     318:	8b 2d       	mov	r24, r11
     31a:	ba df       	rcall	.-140    	; 0x290 <sha204c_resync>
     31c:	87 3e       	cpi	r24, 0xE7	; 231
     31e:	09 f0       	breq	.+2      	; 0x322 <sha204c_send_and_receive+0x74>
     320:	57 c0       	rjmp	.+174    	; 0x3d0 <sha204c_send_and_receive+0x122>
     322:	60 c0       	rjmp	.+192    	; 0x3e4 <sha204c_send_and_receive+0x136>
			else
				continue;
		}

		// Wait minimum command execution time and then start polling for a response.
		delay_ms(execution_delay);
     324:	88 2d       	mov	r24, r8
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	51 d3       	rcall	.+1698   	; 0x9cc <delay_ms>
     32a:	82 e0       	ldi	r24, 0x02	; 2

		// Retry loop for receiving a response.
		n_retries_receive = SHA204_RETRY_COUNT + 1;
     32c:	4a c0       	rjmp	.+148    	; 0x3c2 <sha204c_send_and_receive+0x114>
		while (n_retries_receive-- > 0) {
     32e:	f7 01       	movw	r30, r14

			// Reset response buffer.
			for (i = 0; i < rx_size; i++)
				rx_buffer[i] = 0;
     330:	e8 0f       	add	r30, r24
     332:	f1 1d       	adc	r31, r1
     334:	10 82       	st	Z, r1
     336:	8f 5f       	subi	r24, 0xFF	; 255
		// Retry loop for receiving a response.
		n_retries_receive = SHA204_RETRY_COUNT + 1;
		while (n_retries_receive-- > 0) {

			// Reset response buffer.
			for (i = 0; i < rx_size; i++)
     338:	01 c0       	rjmp	.+2      	; 0x33c <sha204c_send_and_receive+0x8e>
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	8b 15       	cp	r24, r11
     33e:	b8 f3       	brcs	.-18     	; 0x32e <sha204c_send_and_receive+0x80>
     340:	5a 82       	std	Y+2, r5	; 0x02
				rx_buffer[i] = 0;

			// Poll for response.
			timeout_countdown = execution_timeout_us;
     342:	49 82       	std	Y+1, r4	; 0x01
			do {
				ret_code = sha204p_receive_response(rx_size, rx_buffer);
     344:	b7 01       	movw	r22, r14
     346:	8b 2d       	mov	r24, r11
     348:	e6 d2       	rcall	.+1484   	; 0x916 <sha204p_receive_response>
     34a:	18 2f       	mov	r17, r24
     34c:	29 81       	ldd	r18, Y+1	; 0x01
				timeout_countdown -= SHA204_RESPONSE_TIMEOUT;
     34e:	3a 81       	ldd	r19, Y+2	; 0x02
     350:	25 52       	subi	r18, 0x25	; 37
     352:	31 09       	sbc	r19, r1
     354:	3a 83       	std	Y+2, r19	; 0x02
     356:	29 83       	std	Y+1, r18	; 0x01
     358:	89 81       	ldd	r24, Y+1	; 0x01
			} while ((timeout_countdown > SHA204_RESPONSE_TIMEOUT) && (ret_code == SHA204_RX_NO_RESPONSE));
     35a:	9a 81       	ldd	r25, Y+2	; 0x02
     35c:	86 97       	sbiw	r24, 0x26	; 38
     35e:	10 f0       	brcs	.+4      	; 0x364 <sha204c_send_and_receive+0xb6>
     360:	17 3e       	cpi	r17, 0xE7	; 231
     362:	81 f3       	breq	.-32     	; 0x344 <sha204c_send_and_receive+0x96>

			if (ret_code == SHA204_RX_NO_RESPONSE) {
     364:	17 3e       	cpi	r17, 0xE7	; 231
     366:	31 f4       	brne	.+12     	; 0x374 <sha204c_send_and_receive+0xc6>
				// We did not receive a response. Re-synchronize and send command again.
				if (sha204c_resync(rx_size, rx_buffer) == SHA204_RX_NO_RESPONSE)
     368:	b7 01       	movw	r22, r14
     36a:	8b 2d       	mov	r24, r11
     36c:	91 df       	rcall	.-222    	; 0x290 <sha204c_resync>
     36e:	87 3e       	cpi	r24, 0xE7	; 231
     370:	79 f5       	brne	.+94     	; 0x3d0 <sha204c_send_and_receive+0x122>
     372:	3a c0       	rjmp	.+116    	; 0x3e8 <sha204c_send_and_receive+0x13a>
				else
					break;
			}

			// Check whether we received a valid response.
			if (ret_code == SHA204_INVALID_SIZE) {
     374:	14 3e       	cpi	r17, 0xE4	; 228
     376:	49 f4       	brne	.+18     	; 0x38a <sha204c_send_and_receive+0xdc>
				// We see 0xFF for the count when communication got out of sync.
				ret_code_resync = sha204c_resync(rx_size, rx_buffer);
     378:	b7 01       	movw	r22, r14
     37a:	8b 2d       	mov	r24, r11
     37c:	89 df       	rcall	.-238    	; 0x290 <sha204c_resync>
     37e:	88 23       	and	r24, r24
				if (ret_code_resync == SHA204_SUCCESS)
     380:	f9 f0       	breq	.+62     	; 0x3c0 <sha204c_send_and_receive+0x112>
					// We did not have to wake up the device. Try receiving response again.
					continue;
				if (ret_code_resync == SHA204_RESYNC_WITH_WAKEUP)
     382:	88 3e       	cpi	r24, 0xE8	; 232
     384:	29 f1       	breq	.+74     	; 0x3d0 <sha204c_send_and_receive+0x122>
					// We could re-synchronize, but only after waking up the device.
					// Re-send command.
					break;
				else
					// We failed to re-synchronize.
					return ret_code;
     386:	81 2f       	mov	r24, r17
     388:	38 c0       	rjmp	.+112    	; 0x3fa <sha204c_send_and_receive+0x14c>
			}

			// We received a response of valid size.
			// Check the consistency of the response.
			ret_code = sha204c_check_crc(rx_buffer);
     38a:	c7 01       	movw	r24, r14
     38c:	21 df       	rcall	.-446    	; 0x1d0 <sha204c_check_crc>
     38e:	18 2f       	mov	r17, r24
     390:	81 11       	cpse	r24, r1
			if (ret_code == SHA204_SUCCESS) {
     392:	0d c0       	rjmp	.+26     	; 0x3ae <sha204c_send_and_receive+0x100>
     394:	f7 01       	movw	r30, r14
				// Received valid response.
				if (rx_buffer[SHA204_BUFFER_POS_COUNT] > SHA204_RSP_SIZE_MIN)
     396:	80 81       	ld	r24, Z
     398:	85 30       	cpi	r24, 0x05	; 5
     39a:	40 f5       	brcc	.+80     	; 0x3ec <sha204c_send_and_receive+0x13e>
     39c:	81 81       	ldd	r24, Z+1	; 0x01
					// Received non-status response. We are done.
					return ret_code;

				// Received status response.
				status_byte = rx_buffer[SHA204_BUFFER_POS_STATUS];
     39e:	83 30       	cpi	r24, 0x03	; 3

				// Translate the three possible device status error codes
				// into library return codes.
				if (status_byte == SHA204_STATUS_BYTE_PARSE)
     3a0:	39 f1       	breq	.+78     	; 0x3f0 <sha204c_send_and_receive+0x142>
     3a2:	8f 30       	cpi	r24, 0x0F	; 15
					return SHA204_PARSE_ERROR;
				if (status_byte == SHA204_STATUS_BYTE_EXEC)
     3a4:	39 f1       	breq	.+78     	; 0x3f4 <sha204c_send_and_receive+0x146>
					return SHA204_CMD_FAIL;
				if (status_byte == SHA204_STATUS_BYTE_COMM) {
     3a6:	8f 3f       	cpi	r24, 0xFF	; 255
     3a8:	91 f0       	breq	.+36     	; 0x3ce <sha204c_send_and_receive+0x120>
					break;
				}

				// Received status response from CheckMAC, DeriveKey, GenDig,
				// Lock, Nonce, Pause, UpdateExtra, or Write command.
				return ret_code;
     3aa:	81 2f       	mov	r24, r17
     3ac:	26 c0       	rjmp	.+76     	; 0x3fa <sha204c_send_and_receive+0x14c>
			}

			else {
				// Received response with incorrect CRC.
				ret_code_resync = sha204c_resync(rx_size, rx_buffer);
     3ae:	b7 01       	movw	r22, r14
     3b0:	8b 2d       	mov	r24, r11
     3b2:	6e df       	rcall	.-292    	; 0x290 <sha204c_resync>
     3b4:	88 23       	and	r24, r24
				if (ret_code_resync == SHA204_SUCCESS)
     3b6:	21 f0       	breq	.+8      	; 0x3c0 <sha204c_send_and_receive+0x112>
     3b8:	88 3e       	cpi	r24, 0xE8	; 232
					// We did not have to wake up the device. Try receiving response again.
					continue;
				if (ret_code_resync == SHA204_RESYNC_WITH_WAKEUP)
     3ba:	51 f0       	breq	.+20     	; 0x3d0 <sha204c_send_and_receive+0x122>
     3bc:	81 2f       	mov	r24, r17
					// We could re-synchronize, but only after waking up the device.
					// Re-send command.
					break;
				else
					// We failed to re-synchronize.
					return ret_code;
     3be:	1d c0       	rjmp	.+58     	; 0x3fa <sha204c_send_and_receive+0x14c>
     3c0:	87 2d       	mov	r24, r7
     3c2:	77 24       	eor	r7, r7
		// Wait minimum command execution time and then start polling for a response.
		delay_ms(execution_delay);

		// Retry loop for receiving a response.
		n_retries_receive = SHA204_RETRY_COUNT + 1;
		while (n_retries_receive-- > 0) {
     3c4:	7a 94       	dec	r7
     3c6:	78 0e       	add	r7, r24
     3c8:	81 11       	cpse	r24, r1
     3ca:	b7 cf       	rjmp	.-146    	; 0x33a <sha204c_send_and_receive+0x8c>
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <sha204c_send_and_receive+0x122>
     3ce:	14 ed       	ldi	r17, 0xD4	; 212
				if (status_byte == SHA204_STATUS_BYTE_COMM) {
					// In case of the device status byte indicating a communication
					// error this function exits the retry loop for receiving a response
					// and enters the overall retry loop
					// (send command / receive response).
					ret_code = SHA204_STATUS_CRC;
     3d0:	8a 2d       	mov	r24, r10
     3d2:	aa 24       	eor	r10, r10
	sha204c_calculate_crc(count_minus_crc, tx_buffer, tx_buffer + count_minus_crc);

	// Retry loop for sending a command and receiving a response.
	n_retries_send = SHA204_RETRY_COUNT + 1;

	while ((n_retries_send-- > 0) && (ret_code != SHA204_SUCCESS)) {
     3d4:	aa 94       	dec	r10
     3d6:	a8 0e       	add	r10, r24
     3d8:	88 23       	and	r24, r24
     3da:	71 f0       	breq	.+28     	; 0x3f8 <sha204c_send_and_receive+0x14a>
     3dc:	11 11       	cpse	r17, r1
     3de:	95 cf       	rjmp	.-214    	; 0x30a <sha204c_send_and_receive+0x5c>
     3e0:	81 2f       	mov	r24, r17

		} // block end of receive retry loop

	} // block end of send and receive retry loop

	return ret_code;
     3e2:	0b c0       	rjmp	.+22     	; 0x3fa <sha204c_send_and_receive+0x14c>
     3e4:	81 2f       	mov	r24, r17
		// Send command.
		ret_code = sha204p_send_command(count, tx_buffer);
		if (ret_code != SHA204_SUCCESS) {
			if (sha204c_resync(rx_size, rx_buffer) == SHA204_RX_NO_RESPONSE)
				// The device seems to be dead in the water.
				return ret_code;
     3e6:	09 c0       	rjmp	.+18     	; 0x3fa <sha204c_send_and_receive+0x14c>
     3e8:	81 2f       	mov	r24, r17

			if (ret_code == SHA204_RX_NO_RESPONSE) {
				// We did not receive a response. Re-synchronize and send command again.
				if (sha204c_resync(rx_size, rx_buffer) == SHA204_RX_NO_RESPONSE)
					// The device seems to be dead in the water.
					return ret_code;
     3ea:	07 c0       	rjmp	.+14     	; 0x3fa <sha204c_send_and_receive+0x14c>
     3ec:	81 2f       	mov	r24, r17
			ret_code = sha204c_check_crc(rx_buffer);
			if (ret_code == SHA204_SUCCESS) {
				// Received valid response.
				if (rx_buffer[SHA204_BUFFER_POS_COUNT] > SHA204_RSP_SIZE_MIN)
					// Received non-status response. We are done.
					return ret_code;
     3ee:	05 c0       	rjmp	.+10     	; 0x3fa <sha204c_send_and_receive+0x14c>
     3f0:	82 ed       	ldi	r24, 0xD2	; 210
				status_byte = rx_buffer[SHA204_BUFFER_POS_STATUS];

				// Translate the three possible device status error codes
				// into library return codes.
				if (status_byte == SHA204_STATUS_BYTE_PARSE)
					return SHA204_PARSE_ERROR;
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <sha204c_send_and_receive+0x14c>
     3f4:	83 ed       	ldi	r24, 0xD3	; 211
				if (status_byte == SHA204_STATUS_BYTE_EXEC)
					return SHA204_CMD_FAIL;
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <sha204c_send_and_receive+0x14c>
     3f8:	81 2f       	mov	r24, r17

		} // block end of receive retry loop

	} // block end of send and receive retry loop

	return ret_code;
     3fa:	0f 90       	pop	r0
}
     3fc:	0f 90       	pop	r0
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	df 90       	pop	r13
     40c:	cf 90       	pop	r12
     40e:	bf 90       	pop	r11
     410:	af 90       	pop	r10
     412:	9f 90       	pop	r9
     414:	8f 90       	pop	r8
     416:	7f 90       	pop	r7
     418:	5f 90       	pop	r5
     41a:	4f 90       	pop	r4
     41c:	08 95       	ret

0000041e <sha204m_random>:
 * \param[out] rx_buffer pointer to receive buffer
 * \param[in]  mode 0: update seed; 1: no seed update
 * \return status of the operation
 */
uint8_t sha204m_random(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t mode)
{
     41e:	0f 93       	push	r16
	if (!tx_buffer || !rx_buffer || (mode > RANDOM_NO_SEED_UPDATE))
     420:	00 97       	sbiw	r24, 0x00	; 0
     422:	a1 f0       	breq	.+40     	; 0x44c <sha204m_random+0x2e>
     424:	61 15       	cp	r22, r1
     426:	71 05       	cpc	r23, r1
     428:	99 f0       	breq	.+38     	; 0x450 <sha204m_random+0x32>
     42a:	42 30       	cpi	r20, 0x02	; 2
     42c:	98 f4       	brcc	.+38     	; 0x454 <sha204m_random+0x36>
     42e:	ab 01       	movw	r20, r22
     430:	fc 01       	movw	r30, r24
		// no null pointers allowed
		// mode has to match an allowed Random mode.
		return SHA204_BAD_PARAM;

	tx_buffer[SHA204_COUNT_IDX] = RANDOM_COUNT;
     432:	87 e0       	ldi	r24, 0x07	; 7
     434:	80 83       	st	Z, r24
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_RANDOM;
     436:	8b e1       	ldi	r24, 0x1B	; 27
     438:	81 83       	std	Z+1, r24	; 0x01
	tx_buffer[RANDOM_MODE_IDX] = mode & RANDOM_SEED_UPDATE;
     43a:	12 82       	std	Z+2, r1	; 0x02

	// 2. parameter is 0.
	tx_buffer[RANDOM_PARAM2_IDX] =
	tx_buffer[RANDOM_PARAM2_IDX + 1] = 0;
     43c:	14 82       	std	Z+4, r1	; 0x04
	tx_buffer[SHA204_COUNT_IDX] = RANDOM_COUNT;
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_RANDOM;
	tx_buffer[RANDOM_MODE_IDX] = mode & RANDOM_SEED_UPDATE;

	// 2. parameter is 0.
	tx_buffer[RANDOM_PARAM2_IDX] =
     43e:	13 82       	std	Z+3, r1	; 0x03
	tx_buffer[RANDOM_PARAM2_IDX + 1] = 0;

	return sha204c_send_and_receive(&tx_buffer[0], RANDOM_RSP_SIZE, &rx_buffer[0],
     440:	08 e2       	ldi	r16, 0x28	; 40
     442:	2b e0       	ldi	r18, 0x0B	; 11
     444:	63 e2       	ldi	r22, 0x23	; 35
     446:	cf 01       	movw	r24, r30
     448:	32 df       	rcall	.-412    	; 0x2ae <sha204c_send_and_receive>
     44a:	05 c0       	rjmp	.+10     	; 0x456 <sha204m_random+0x38>
uint8_t sha204m_random(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t mode)
{
	if (!tx_buffer || !rx_buffer || (mode > RANDOM_NO_SEED_UPDATE))
		// no null pointers allowed
		// mode has to match an allowed Random mode.
		return SHA204_BAD_PARAM;
     44c:	82 ee       	ldi	r24, 0xE2	; 226
     44e:	03 c0       	rjmp	.+6      	; 0x456 <sha204m_random+0x38>
     450:	82 ee       	ldi	r24, 0xE2	; 226
     452:	01 c0       	rjmp	.+2      	; 0x456 <sha204m_random+0x38>
     454:	82 ee       	ldi	r24, 0xE2	; 226
	tx_buffer[RANDOM_PARAM2_IDX] =
	tx_buffer[RANDOM_PARAM2_IDX + 1] = 0;

	return sha204c_send_and_receive(&tx_buffer[0], RANDOM_RSP_SIZE, &rx_buffer[0],
				RANDOM_DELAY, RANDOM_EXEC_MAX - RANDOM_DELAY);
}
     456:	0f 91       	pop	r16
     458:	08 95       	ret

0000045a <sha204m_read>:
 * \param[in]  zone 0: Configuration; 1: OTP; 2: Data
 * \param[in]  address address to read from
 * \return status of the operation
 */
uint8_t sha204m_read(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t zone, uint16_t address)
{
     45a:	0f 93       	push	r16
	uint8_t rx_size;

	if (!tx_buffer || !rx_buffer || (zone & ~READ_ZONE_MASK)
     45c:	00 97       	sbiw	r24, 0x00	; 0
     45e:	91 f1       	breq	.+100    	; 0x4c4 <sha204m_read+0x6a>
     460:	61 15       	cp	r22, r1
     462:	71 05       	cpc	r23, r1
     464:	89 f1       	breq	.+98     	; 0x4c8 <sha204m_read+0x6e>
     466:	e4 2f       	mov	r30, r20
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	ec 77       	andi	r30, 0x7C	; 124
				|| ((zone & READ_ZONE_MODE_32_BYTES) && (zone == SHA204_ZONE_OTP)))
     46c:	ef 2b       	or	r30, r31
     46e:	71 f5       	brne	.+92     	; 0x4cc <sha204m_read+0x72>
		// no null pointers allowed
		// zone has to match a valid param1 value.
		// Reading a 32-byte from the OTP zone is not allowed.
		return SHA204_BAD_PARAM;

	address >>= 2;
     470:	36 95       	lsr	r19
     472:	27 95       	ror	r18
     474:	36 95       	lsr	r19
     476:	27 95       	ror	r18
     478:	54 2f       	mov	r21, r20
     47a:	53 70       	andi	r21, 0x03	; 3
	if ((zone & SHA204_ZONE_MASK) == SHA204_ZONE_CONFIG) {
     47c:	21 f4       	brne	.+8      	; 0x486 <sha204m_read+0x2c>
		if (address > SHA204_ADDRESS_MASK_CONFIG)
     47e:	20 32       	cpi	r18, 0x20	; 32
     480:	31 05       	cpc	r19, r1
     482:	30 f5       	brcc	.+76     	; 0x4d0 <sha204m_read+0x76>
     484:	0b c0       	rjmp	.+22     	; 0x49c <sha204m_read+0x42>
			return SHA204_BAD_PARAM;
	}
	else if ((zone & SHA204_ZONE_MASK) == SHA204_ZONE_OTP) {
     486:	51 30       	cpi	r21, 0x01	; 1
     488:	21 f4       	brne	.+8      	; 0x492 <sha204m_read+0x38>
		if (address > SHA204_ADDRESS_MASK_OTP)
     48a:	20 31       	cpi	r18, 0x10	; 16
     48c:	31 05       	cpc	r19, r1
     48e:	10 f5       	brcc	.+68     	; 0x4d4 <sha204m_read+0x7a>
     490:	05 c0       	rjmp	.+10     	; 0x49c <sha204m_read+0x42>
			return SHA204_BAD_PARAM;
	}
	else if ((zone & SHA204_ZONE_MASK) == SHA204_ZONE_DATA) {
     492:	52 30       	cpi	r21, 0x02	; 2
     494:	19 f4       	brne	.+6      	; 0x49c <sha204m_read+0x42>
		if (address > SHA204_ADDRESS_MASK)
     496:	20 38       	cpi	r18, 0x80	; 128
     498:	31 05       	cpc	r19, r1
     49a:	f0 f4       	brcc	.+60     	; 0x4d8 <sha204m_read+0x7e>
			return SHA204_BAD_PARAM;
	}

	tx_buffer[SHA204_COUNT_IDX] = READ_COUNT;
     49c:	37 e0       	ldi	r19, 0x07	; 7
     49e:	fc 01       	movw	r30, r24
     4a0:	30 83       	st	Z, r19
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_READ;
     4a2:	32 e0       	ldi	r19, 0x02	; 2
     4a4:	31 83       	std	Z+1, r19	; 0x01
	tx_buffer[READ_ZONE_IDX] = zone;
     4a6:	42 83       	std	Z+2, r20	; 0x02
	tx_buffer[READ_ADDR_IDX] = (uint8_t) (address & SHA204_ADDRESS_MASK);
     4a8:	2f 77       	andi	r18, 0x7F	; 127
     4aa:	23 83       	std	Z+3, r18	; 0x03
	tx_buffer[READ_ADDR_IDX + 1] = 0;
     4ac:	14 82       	std	Z+4, r1	; 0x04

	rx_size = (zone & SHA204_ZONE_COUNT_FLAG) ? READ_32_RSP_SIZE : READ_4_RSP_SIZE;
     4ae:	44 23       	and	r20, r20
     4b0:	14 f4       	brge	.+4      	; 0x4b6 <sha204m_read+0x5c>
     4b2:	33 e2       	ldi	r19, 0x23	; 35
     4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <sha204m_read+0x5e>
     4b6:	37 e0       	ldi	r19, 0x07	; 7
     4b8:	ab 01       	movw	r20, r22

	return sha204c_send_and_receive(&tx_buffer[0], rx_size, &rx_buffer[0],
     4ba:	03 e0       	ldi	r16, 0x03	; 3
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	63 2f       	mov	r22, r19
     4c0:	f6 de       	rcall	.-532    	; 0x2ae <sha204c_send_and_receive>
     4c2:	0b c0       	rjmp	.+22     	; 0x4da <sha204m_read+0x80>
	if (!tx_buffer || !rx_buffer || (zone & ~READ_ZONE_MASK)
				|| ((zone & READ_ZONE_MODE_32_BYTES) && (zone == SHA204_ZONE_OTP)))
		// no null pointers allowed
		// zone has to match a valid param1 value.
		// Reading a 32-byte from the OTP zone is not allowed.
		return SHA204_BAD_PARAM;
     4c4:	82 ee       	ldi	r24, 0xE2	; 226
     4c6:	09 c0       	rjmp	.+18     	; 0x4da <sha204m_read+0x80>
     4c8:	82 ee       	ldi	r24, 0xE2	; 226
     4ca:	07 c0       	rjmp	.+14     	; 0x4da <sha204m_read+0x80>
     4cc:	82 ee       	ldi	r24, 0xE2	; 226
     4ce:	05 c0       	rjmp	.+10     	; 0x4da <sha204m_read+0x80>

	address >>= 2;
	if ((zone & SHA204_ZONE_MASK) == SHA204_ZONE_CONFIG) {
		if (address > SHA204_ADDRESS_MASK_CONFIG)
			return SHA204_BAD_PARAM;
     4d0:	82 ee       	ldi	r24, 0xE2	; 226
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <sha204m_read+0x80>
	}
	else if ((zone & SHA204_ZONE_MASK) == SHA204_ZONE_OTP) {
		if (address > SHA204_ADDRESS_MASK_OTP)
			return SHA204_BAD_PARAM;
     4d4:	82 ee       	ldi	r24, 0xE2	; 226
     4d6:	01 c0       	rjmp	.+2      	; 0x4da <sha204m_read+0x80>
	}
	else if ((zone & SHA204_ZONE_MASK) == SHA204_ZONE_DATA) {
		if (address > SHA204_ADDRESS_MASK)
			return SHA204_BAD_PARAM;
     4d8:	82 ee       	ldi	r24, 0xE2	; 226

	rx_size = (zone & SHA204_ZONE_COUNT_FLAG) ? READ_32_RSP_SIZE : READ_4_RSP_SIZE;

	return sha204c_send_and_receive(&tx_buffer[0], rx_size, &rx_buffer[0],
				READ_DELAY, READ_EXEC_MAX - READ_DELAY);
}
     4da:	0f 91       	pop	r16
     4dc:	08 95       	ret

000004de <sha204m_write>:
 * \param[in]  mac pointer to MAC (ignored if zone is unlocked)
 * \return status of the operation
 */
uint8_t sha204m_write(uint8_t *tx_buffer, uint8_t *rx_buffer,
			uint8_t zone, uint16_t address, uint8_t *new_value, uint8_t *mac)
{
     4de:	8f 92       	push	r8
     4e0:	9f 92       	push	r9
     4e2:	af 92       	push	r10
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
	uint8_t *p_command;
	uint8_t count;

	if (!tx_buffer || !rx_buffer || !new_value || (zone & ~WRITE_ZONE_MASK))
     4f6:	00 97       	sbiw	r24, 0x00	; 0
     4f8:	09 f4       	brne	.+2      	; 0x4fc <sha204m_write+0x1e>
     4fa:	55 c0       	rjmp	.+170    	; 0x5a6 <sha204m_write+0xc8>
     4fc:	61 15       	cp	r22, r1
     4fe:	71 05       	cpc	r23, r1
     500:	09 f4       	brne	.+2      	; 0x504 <sha204m_write+0x26>
     502:	53 c0       	rjmp	.+166    	; 0x5aa <sha204m_write+0xcc>
     504:	01 15       	cp	r16, r1
     506:	11 05       	cpc	r17, r1
     508:	09 f4       	brne	.+2      	; 0x50c <sha204m_write+0x2e>
     50a:	51 c0       	rjmp	.+162    	; 0x5ae <sha204m_write+0xd0>
     50c:	e4 2f       	mov	r30, r20
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	ec 73       	andi	r30, 0x3C	; 60
     512:	ef 2b       	or	r30, r31
     514:	09 f0       	breq	.+2      	; 0x518 <sha204m_write+0x3a>
     516:	4d c0       	rjmp	.+154    	; 0x5b2 <sha204m_write+0xd4>
		// no null pointers allowed
		// zone has to match a valid param1 value.
		return SHA204_BAD_PARAM;

	address >>= 2;
     518:	36 95       	lsr	r19
     51a:	27 95       	ror	r18
     51c:	36 95       	lsr	r19
     51e:	27 95       	ror	r18
     520:	54 2f       	mov	r21, r20
     522:	53 70       	andi	r21, 0x03	; 3
	if ((zone & SHA204_ZONE_MASK) == SHA204_ZONE_CONFIG) {
     524:	29 f4       	brne	.+10     	; 0x530 <sha204m_write+0x52>
		if (address > SHA204_ADDRESS_MASK_CONFIG)
     526:	20 32       	cpi	r18, 0x20	; 32
     528:	31 05       	cpc	r19, r1
     52a:	08 f0       	brcs	.+2      	; 0x52e <sha204m_write+0x50>
     52c:	44 c0       	rjmp	.+136    	; 0x5b6 <sha204m_write+0xd8>
     52e:	0c c0       	rjmp	.+24     	; 0x548 <sha204m_write+0x6a>
			return SHA204_BAD_PARAM;
	}
	else if ((zone & SHA204_ZONE_MASK) == SHA204_ZONE_OTP) {
     530:	51 30       	cpi	r21, 0x01	; 1
     532:	29 f4       	brne	.+10     	; 0x53e <sha204m_write+0x60>
		if (address > SHA204_ADDRESS_MASK_OTP)
     534:	20 31       	cpi	r18, 0x10	; 16
     536:	31 05       	cpc	r19, r1
     538:	08 f0       	brcs	.+2      	; 0x53c <sha204m_write+0x5e>
     53a:	3f c0       	rjmp	.+126    	; 0x5ba <sha204m_write+0xdc>
     53c:	05 c0       	rjmp	.+10     	; 0x548 <sha204m_write+0x6a>
			return SHA204_BAD_PARAM;
	}
	else if ((zone & SHA204_ZONE_MASK) == SHA204_ZONE_DATA) {
     53e:	52 30       	cpi	r21, 0x02	; 2
     540:	19 f4       	brne	.+6      	; 0x548 <sha204m_write+0x6a>
		if (address > SHA204_ADDRESS_MASK)
     542:	20 38       	cpi	r18, 0x80	; 128
     544:	31 05       	cpc	r19, r1
     546:	d8 f5       	brcc	.+118    	; 0x5be <sha204m_write+0xe0>
			return SHA204_BAD_PARAM;
	}

	p_command = &tx_buffer[SHA204_OPCODE_IDX];
	*p_command++ = SHA204_WRITE;
     548:	32 e1       	ldi	r19, 0x12	; 18
     54a:	fc 01       	movw	r30, r24
     54c:	31 83       	std	Z+1, r19	; 0x01
	*p_command++ = zone;
     54e:	42 83       	std	Z+2, r20	; 0x02
	*p_command++ = (uint8_t) (address & SHA204_ADDRESS_MASK);
     550:	2f 77       	andi	r18, 0x7F	; 127
     552:	23 83       	std	Z+3, r18	; 0x03
	*p_command++ = 0;
     554:	ec 01       	movw	r28, r24
     556:	25 96       	adiw	r28, 0x05	; 5
     558:	14 82       	std	Z+4, r1	; 0x04

	count = (zone & SHA204_ZONE_COUNT_FLAG) ? SHA204_ZONE_ACCESS_32 : SHA204_ZONE_ACCESS_4;
     55a:	44 23       	and	r20, r20
     55c:	14 f4       	brge	.+4      	; 0x562 <sha204m_write+0x84>
     55e:	20 e2       	ldi	r18, 0x20	; 32
     560:	01 c0       	rjmp	.+2      	; 0x564 <sha204m_write+0x86>
     562:	24 e0       	ldi	r18, 0x04	; 4
     564:	5b 01       	movw	r10, r22
     566:	4c 01       	movw	r8, r24
	memcpy(p_command, new_value, count);
     568:	c2 2e       	mov	r12, r18
     56a:	d1 2c       	mov	r13, r1
     56c:	a6 01       	movw	r20, r12
     56e:	b8 01       	movw	r22, r16
     570:	ce 01       	movw	r24, r28
     572:	69 d5       	rcall	.+2770   	; 0x1046 <memcpy>
	p_command += count;
     574:	cc 0d       	add	r28, r12
     576:	dd 1d       	adc	r29, r13

	if (mac != NULL)
     578:	e1 14       	cp	r14, r1
     57a:	f1 04       	cpc	r15, r1
     57c:	41 f0       	breq	.+16     	; 0x58e <sha204m_write+0xb0>
	{
		memcpy(p_command, mac, WRITE_MAC_SIZE);
     57e:	80 e2       	ldi	r24, 0x20	; 32
     580:	f7 01       	movw	r30, r14
     582:	de 01       	movw	r26, r28
     584:	01 90       	ld	r0, Z+
     586:	0d 92       	st	X+, r0
     588:	8a 95       	dec	r24
     58a:	e1 f7       	brne	.-8      	; 0x584 <sha204m_write+0xa6>
		p_command += WRITE_MAC_SIZE;
     58c:	a0 96       	adiw	r28, 0x20	; 32
	}

	// Supply count.
	tx_buffer[SHA204_COUNT_IDX] = (uint8_t) (p_command - &tx_buffer[0] + SHA204_CRC_SIZE);
     58e:	c8 19       	sub	r28, r8
     590:	d9 09       	sbc	r29, r9
     592:	ce 5f       	subi	r28, 0xFE	; 254
     594:	f4 01       	movw	r30, r8
     596:	c0 83       	st	Z, r28

	return sha204c_send_and_receive(&tx_buffer[0], WRITE_RSP_SIZE, &rx_buffer[0],
     598:	06 e2       	ldi	r16, 0x26	; 38
     59a:	24 e0       	ldi	r18, 0x04	; 4
     59c:	a5 01       	movw	r20, r10
     59e:	64 e0       	ldi	r22, 0x04	; 4
     5a0:	c4 01       	movw	r24, r8
     5a2:	85 de       	rcall	.-758    	; 0x2ae <sha204c_send_and_receive>
     5a4:	0d c0       	rjmp	.+26     	; 0x5c0 <sha204m_write+0xe2>
	uint8_t count;

	if (!tx_buffer || !rx_buffer || !new_value || (zone & ~WRITE_ZONE_MASK))
		// no null pointers allowed
		// zone has to match a valid param1 value.
		return SHA204_BAD_PARAM;
     5a6:	82 ee       	ldi	r24, 0xE2	; 226
     5a8:	0b c0       	rjmp	.+22     	; 0x5c0 <sha204m_write+0xe2>
     5aa:	82 ee       	ldi	r24, 0xE2	; 226
     5ac:	09 c0       	rjmp	.+18     	; 0x5c0 <sha204m_write+0xe2>
     5ae:	82 ee       	ldi	r24, 0xE2	; 226
     5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <sha204m_write+0xe2>
     5b2:	82 ee       	ldi	r24, 0xE2	; 226
     5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <sha204m_write+0xe2>

	address >>= 2;
	if ((zone & SHA204_ZONE_MASK) == SHA204_ZONE_CONFIG) {
		if (address > SHA204_ADDRESS_MASK_CONFIG)
			return SHA204_BAD_PARAM;
     5b6:	82 ee       	ldi	r24, 0xE2	; 226
     5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <sha204m_write+0xe2>
	}
	else if ((zone & SHA204_ZONE_MASK) == SHA204_ZONE_OTP) {
		if (address > SHA204_ADDRESS_MASK_OTP)
			return SHA204_BAD_PARAM;
     5ba:	82 ee       	ldi	r24, 0xE2	; 226
     5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <sha204m_write+0xe2>
	}
	else if ((zone & SHA204_ZONE_MASK) == SHA204_ZONE_DATA) {
		if (address > SHA204_ADDRESS_MASK)
			return SHA204_BAD_PARAM;
     5be:	82 ee       	ldi	r24, 0xE2	; 226
	// Supply count.
	tx_buffer[SHA204_COUNT_IDX] = (uint8_t) (p_command - &tx_buffer[0] + SHA204_CRC_SIZE);

	return sha204c_send_and_receive(&tx_buffer[0], WRITE_RSP_SIZE, &rx_buffer[0],
				WRITE_DELAY, WRITE_EXEC_MAX - WRITE_DELAY);
}
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	ff 90       	pop	r15
     5ca:	ef 90       	pop	r14
     5cc:	df 90       	pop	r13
     5ce:	cf 90       	pop	r12
     5d0:	bf 90       	pop	r11
     5d2:	af 90       	pop	r10
     5d4:	9f 90       	pop	r9
     5d6:	8f 90       	pop	r8
     5d8:	08 95       	ret

000005da <sha204e_sleep>:
#if (SHA204_EXAMPLE_CONFIG_WITH_LOCK != 0)
	ret_code = sha204e_lock_config_zone(SHA204_HOST_ADDRESS);
#endif

	return ret_code;
}
     5da:	91 c1       	rjmp	.+802    	; 0x8fe <sha204p_sleep>
     5dc:	08 95       	ret

000005de <sha204e_read_serial_number>:
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	a3 97       	sbiw	r28, 0x23	; 35
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	8b 01       	movw	r16, r22
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e8       	ldi	r20, 0x80	; 128
     600:	be 01       	movw	r22, r28
     602:	6f 5f       	subi	r22, 0xFF	; 255
     604:	7f 4f       	sbci	r23, 0xFF	; 255
     606:	29 df       	rcall	.-430    	; 0x45a <sha204m_read>
     608:	f8 2e       	mov	r15, r24
     60a:	81 11       	cpse	r24, r1
     60c:	78 d1       	rcall	.+752    	; 0x8fe <sha204p_sleep>
     60e:	8a 81       	ldd	r24, Y+2	; 0x02
     610:	9b 81       	ldd	r25, Y+3	; 0x03
     612:	f8 01       	movw	r30, r16
     614:	91 83       	std	Z+1, r25	; 0x01
     616:	80 83       	st	Z, r24
     618:	8c 81       	ldd	r24, Y+4	; 0x04
     61a:	9d 81       	ldd	r25, Y+5	; 0x05
     61c:	93 83       	std	Z+3, r25	; 0x03
     61e:	82 83       	std	Z+2, r24	; 0x02
     620:	d8 01       	movw	r26, r16
     622:	14 96       	adiw	r26, 0x04	; 4
     624:	85 e0       	ldi	r24, 0x05	; 5
     626:	fe 01       	movw	r30, r28
     628:	3a 96       	adiw	r30, 0x0a	; 10
     62a:	01 90       	ld	r0, Z+
     62c:	0d 92       	st	X+, r0
     62e:	8a 95       	dec	r24
     630:	e1 f7       	brne	.-8      	; 0x62a <sha204e_read_serial_number+0x4c>
     632:	8f 2d       	mov	r24, r15
     634:	a3 96       	adiw	r28, 0x23	; 35
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	08 95       	ret

0000064c <sha204e_read_config_zone>:
 * \param[out] config_data pointer to all 88 bytes in configuration zone.
               Not used if NULL.
 * \return status of the operation
 */
uint8_t sha204e_read_config_zone(uint8_t device_id, uint8_t *config_data)
{
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	e2 97       	sbiw	r28, 0x32	; 50
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
     66c:	18 2f       	mov	r17, r24
     66e:	7b 01       	movw	r14, r22
	// Use this buffer to read the last 24 bytes in 4-byte junks.
	uint8_t response_read_4[READ_4_RSP_SIZE];
	
	uint8_t *p_response;

	sha204p_init();
     670:	c9 d0       	rcall	.+402    	; 0x804 <sha204p_init>

	sha204p_set_device_id(device_id);
     672:	81 2f       	mov	r24, r17
     674:	c4 d0       	rcall	.+392    	; 0x7fe <sha204p_set_device_id>

	// Read first 32 bytes. Put a breakpoint after the read and inspect "response" to obtain the data.
	ret_code = sha204c_wakeup(response);
     676:	ce 01       	movw	r24, r28
     678:	09 96       	adiw	r24, 0x09	; 9
     67a:	db dd       	rcall	.-1098   	; 0x232 <sha204c_wakeup>
     67c:	89 83       	std	Y+1, r24	; 0x01
	if (ret_code != SHA204_SUCCESS)
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	88 23       	and	r24, r24
     682:	11 f0       	breq	.+4      	; 0x688 <sha204e_read_config_zone+0x3c>
		return ret_code;
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	ac c0       	rjmp	.+344    	; 0x7e0 <sha204e_read_config_zone+0x194>
		
	memset(response, 0, sizeof(response));
     688:	be 01       	movw	r22, r28
     68a:	67 5f       	subi	r22, 0xF7	; 247
     68c:	7f 4f       	sbci	r23, 0xFF	; 255
     68e:	83 e2       	ldi	r24, 0x23	; 35
     690:	db 01       	movw	r26, r22
     692:	1d 92       	st	X+, r1
     694:	8a 95       	dec	r24
     696:	e9 f7       	brne	.-6      	; 0x692 <sha204e_read_config_zone+0x46>
	config_address = 0;
	ret_code = sha204m_read(command, response, SHA204_ZONE_CONFIG | READ_ZONE_MODE_32_BYTES, config_address);
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	40 e8       	ldi	r20, 0x80	; 128
     69e:	ce 01       	movw	r24, r28
     6a0:	02 96       	adiw	r24, 0x02	; 2
     6a2:	db de       	rcall	.-586    	; 0x45a <sha204m_read>
	sha204p_sleep();
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	2b d1       	rcall	.+598    	; 0x8fe <sha204p_sleep>
	if (ret_code != SHA204_SUCCESS)
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	88 23       	and	r24, r24
     6ac:	11 f0       	breq	.+4      	; 0x6b2 <sha204e_read_config_zone+0x66>
		return ret_code;
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	97 c0       	rjmp	.+302    	; 0x7e0 <sha204e_read_config_zone+0x194>
		
	if (config_data) {
     6b2:	e1 14       	cp	r14, r1
     6b4:	f1 04       	cpc	r15, r1
     6b6:	59 f0       	breq	.+22     	; 0x6ce <sha204e_read_config_zone+0x82>
		memcpy(config_data, &response[SHA204_BUFFER_POS_DATA], SHA204_ZONE_ACCESS_32);
     6b8:	80 e2       	ldi	r24, 0x20	; 32
     6ba:	fe 01       	movw	r30, r28
     6bc:	3a 96       	adiw	r30, 0x0a	; 10
     6be:	d7 01       	movw	r26, r14
     6c0:	01 90       	ld	r0, Z+
     6c2:	0d 92       	st	X+, r0
     6c4:	8a 95       	dec	r24
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <sha204e_read_config_zone+0x74>
		config_data += SHA204_ZONE_ACCESS_32;
     6c8:	b0 e2       	ldi	r27, 0x20	; 32
     6ca:	eb 0e       	add	r14, r27
     6cc:	f1 1c       	adc	r15, r1
	}		
	// Read second 32 bytes. Put a breakpoint after the read and inspect "response" to obtain the data.
	memset(response, 0, sizeof(response));
     6ce:	ce 01       	movw	r24, r28
     6d0:	09 96       	adiw	r24, 0x09	; 9
     6d2:	23 e2       	ldi	r18, 0x23	; 35
     6d4:	fc 01       	movw	r30, r24
     6d6:	11 92       	st	Z+, r1
     6d8:	2a 95       	dec	r18
	ret_code = sha204c_wakeup(response);
     6da:	e9 f7       	brne	.-6      	; 0x6d6 <sha204e_read_config_zone+0x8a>
     6dc:	aa dd       	rcall	.-1196   	; 0x232 <sha204c_wakeup>
     6de:	89 83       	std	Y+1, r24	; 0x01
	if (ret_code != SHA204_SUCCESS)
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	88 23       	and	r24, r24
     6e4:	11 f0       	breq	.+4      	; 0x6ea <sha204e_read_config_zone+0x9e>
		return ret_code;
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	7b c0       	rjmp	.+246    	; 0x7e0 <sha204e_read_config_zone+0x194>

	config_address += SHA204_ZONE_ACCESS_32;
	memset(response, 0, sizeof(response));
     6ea:	be 01       	movw	r22, r28
     6ec:	67 5f       	subi	r22, 0xF7	; 247
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	83 e2       	ldi	r24, 0x23	; 35
     6f2:	db 01       	movw	r26, r22
     6f4:	1d 92       	st	X+, r1
     6f6:	8a 95       	dec	r24
	ret_code = sha204m_read(command, response, SHA204_ZONE_CONFIG | READ_ZONE_MODE_32_BYTES, config_address);
     6f8:	e9 f7       	brne	.-6      	; 0x6f4 <sha204e_read_config_zone+0xa8>
     6fa:	20 e2       	ldi	r18, 0x20	; 32
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	40 e8       	ldi	r20, 0x80	; 128
     700:	ce 01       	movw	r24, r28
     702:	02 96       	adiw	r24, 0x02	; 2
     704:	aa de       	rcall	.-684    	; 0x45a <sha204m_read>
	sha204p_sleep();
     706:	89 83       	std	Y+1, r24	; 0x01
     708:	fa d0       	rcall	.+500    	; 0x8fe <sha204p_sleep>
	if (ret_code != SHA204_SUCCESS)
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	88 23       	and	r24, r24
     70e:	11 f0       	breq	.+4      	; 0x714 <sha204e_read_config_zone+0xc8>
		return ret_code;
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	66 c0       	rjmp	.+204    	; 0x7e0 <sha204e_read_config_zone+0x194>
		
	if (config_data) {
     714:	e1 14       	cp	r14, r1
     716:	f1 04       	cpc	r15, r1
     718:	59 f0       	breq	.+22     	; 0x730 <sha204e_read_config_zone+0xe4>
		memcpy(config_data, &response[SHA204_BUFFER_POS_DATA], SHA204_ZONE_ACCESS_32);
     71a:	80 e2       	ldi	r24, 0x20	; 32
     71c:	fe 01       	movw	r30, r28
     71e:	3a 96       	adiw	r30, 0x0a	; 10
     720:	d7 01       	movw	r26, r14
     722:	01 90       	ld	r0, Z+
     724:	0d 92       	st	X+, r0
     726:	8a 95       	dec	r24
     728:	e1 f7       	brne	.-8      	; 0x722 <sha204e_read_config_zone+0xd6>
		config_data += SHA204_ZONE_ACCESS_32;
     72a:	b0 e2       	ldi	r27, 0x20	; 32
     72c:	eb 0e       	add	r14, r27
	}
		
	// Read last 24 bytes in six four-byte junks.
	memset(response, 0, sizeof(response));
     72e:	f1 1c       	adc	r15, r1
     730:	ce 01       	movw	r24, r28
     732:	09 96       	adiw	r24, 0x09	; 9
     734:	23 e2       	ldi	r18, 0x23	; 35
     736:	fc 01       	movw	r30, r24
     738:	11 92       	st	Z+, r1
     73a:	2a 95       	dec	r18
	ret_code = sha204c_wakeup(response);
     73c:	e9 f7       	brne	.-6      	; 0x738 <sha204e_read_config_zone+0xec>
     73e:	79 dd       	rcall	.-1294   	; 0x232 <sha204c_wakeup>
     740:	89 83       	std	Y+1, r24	; 0x01
	if (ret_code != SHA204_SUCCESS)
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	88 23       	and	r24, r24
     746:	11 f0       	breq	.+4      	; 0x74c <sha204e_read_config_zone+0x100>
		return ret_code;
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	4a c0       	rjmp	.+148    	; 0x7e0 <sha204e_read_config_zone+0x194>
	
	config_address += SHA204_ZONE_ACCESS_32;
	response[SHA204_BUFFER_POS_COUNT] = 0;
     74c:	19 86       	std	Y+9, r1	; 0x09
	p_response = &response[SHA204_BUFFER_POS_DATA];
	memset(response, 0, sizeof(response));
     74e:	fe 01       	movw	r30, r28
     750:	39 96       	adiw	r30, 0x09	; 9
     752:	83 e2       	ldi	r24, 0x23	; 35
     754:	df 01       	movw	r26, r30
     756:	1d 92       	st	X+, r1
     758:	8a 95       	dec	r24
     75a:	e9 f7       	brne	.-6      	; 0x756 <sha204e_read_config_zone+0x10a>
	if (ret_code != SHA204_SUCCESS)
		return ret_code;
	
	config_address += SHA204_ZONE_ACCESS_32;
	response[SHA204_BUFFER_POS_COUNT] = 0;
	p_response = &response[SHA204_BUFFER_POS_DATA];
     75c:	6e 01       	movw	r12, r28
     75e:	ba e0       	ldi	r27, 0x0A	; 10
     760:	cb 0e       	add	r12, r27
     762:	d1 1c       	adc	r13, r1
	memset(response, 0, sizeof(response));
	ret_code = sha204c_wakeup(response);
	if (ret_code != SHA204_SUCCESS)
		return ret_code;
	
	config_address += SHA204_ZONE_ACCESS_32;
     764:	00 e4       	ldi	r16, 0x40	; 64
     766:	10 e0       	ldi	r17, 0x00	; 0
	response[SHA204_BUFFER_POS_COUNT] = 0;
	p_response = &response[SHA204_BUFFER_POS_DATA];
	memset(response, 0, sizeof(response));
	while (config_address < SHA204_CONFIG_SIZE) {
     768:	28 c0       	rjmp	.+80     	; 0x7ba <sha204e_read_config_zone+0x16e>
		memset(response_read_4, 0, sizeof(response_read_4));
     76a:	be 01       	movw	r22, r28
     76c:	64 5d       	subi	r22, 0xD4	; 212
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	87 e0       	ldi	r24, 0x07	; 7
     772:	fb 01       	movw	r30, r22
     774:	11 92       	st	Z+, r1
     776:	8a 95       	dec	r24
		ret_code = sha204m_read(command, response_read_4, SHA204_ZONE_CONFIG, config_address);
     778:	e9 f7       	brne	.-6      	; 0x774 <sha204e_read_config_zone+0x128>
     77a:	98 01       	movw	r18, r16
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	ce 01       	movw	r24, r28
     780:	02 96       	adiw	r24, 0x02	; 2
     782:	6b de       	rcall	.-810    	; 0x45a <sha204m_read>
		if (ret_code != SHA204_SUCCESS) {
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	88 23       	and	r24, r24
			sha204p_sleep();
     78a:	19 f0       	breq	.+6      	; 0x792 <sha204e_read_config_zone+0x146>
     78c:	b8 d0       	rcall	.+368    	; 0x8fe <sha204p_sleep>
			return ret_code;
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	27 c0       	rjmp	.+78     	; 0x7e0 <sha204e_read_config_zone+0x194>
		}
		memcpy(p_response, &response_read_4[SHA204_BUFFER_POS_DATA], SHA204_ZONE_ACCESS_4);
     792:	8d a5       	ldd	r24, Y+45	; 0x2d
     794:	9e a5       	ldd	r25, Y+46	; 0x2e
     796:	d6 01       	movw	r26, r12
     798:	11 96       	adiw	r26, 0x01	; 1
     79a:	9c 93       	st	X, r25
     79c:	8e 93       	st	-X, r24
     79e:	8f a5       	ldd	r24, Y+47	; 0x2f
     7a0:	98 a9       	ldd	r25, Y+48	; 0x30
     7a2:	13 96       	adiw	r26, 0x03	; 3
     7a4:	9c 93       	st	X, r25
     7a6:	8e 93       	st	-X, r24
     7a8:	12 97       	sbiw	r26, 0x02	; 2
		p_response += SHA204_ZONE_ACCESS_4;
     7aa:	b4 e0       	ldi	r27, 0x04	; 4
     7ac:	cb 0e       	add	r12, r27
		response[SHA204_BUFFER_POS_COUNT] += SHA204_ZONE_ACCESS_4; // Update count byte in virtual response packet.
     7ae:	d1 1c       	adc	r13, r1
     7b0:	89 85       	ldd	r24, Y+9	; 0x09
     7b2:	8c 5f       	subi	r24, 0xFC	; 252
		config_address += SHA204_ZONE_ACCESS_4;
     7b4:	89 87       	std	Y+9, r24	; 0x09
     7b6:	0c 5f       	subi	r16, 0xFC	; 252
	
	config_address += SHA204_ZONE_ACCESS_32;
	response[SHA204_BUFFER_POS_COUNT] = 0;
	p_response = &response[SHA204_BUFFER_POS_DATA];
	memset(response, 0, sizeof(response));
	while (config_address < SHA204_CONFIG_SIZE) {
     7b8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ba:	08 35       	cpi	r16, 0x58	; 88
     7bc:	11 05       	cpc	r17, r1
		p_response += SHA204_ZONE_ACCESS_4;
		response[SHA204_BUFFER_POS_COUNT] += SHA204_ZONE_ACCESS_4; // Update count byte in virtual response packet.
		config_address += SHA204_ZONE_ACCESS_4;
	}	
	// Put a breakpoint here and inspect "response" to obtain the data.
	sha204p_sleep();
     7be:	a8 f2       	brcs	.-86     	; 0x76a <sha204e_read_config_zone+0x11e>
     7c0:	9e d0       	rcall	.+316    	; 0x8fe <sha204p_sleep>
		
	if (ret_code == SHA204_SUCCESS && config_data)
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	81 11       	cpse	r24, r1
     7c6:	0b c0       	rjmp	.+22     	; 0x7de <sha204e_read_config_zone+0x192>
     7c8:	e1 14       	cp	r14, r1
     7ca:	f1 04       	cpc	r15, r1
     7cc:	41 f0       	breq	.+16     	; 0x7de <sha204e_read_config_zone+0x192>
		memcpy(config_data, &response[SHA204_BUFFER_POS_DATA], SHA204_CONFIG_SIZE - 2 * SHA204_ZONE_ACCESS_32);
     7ce:	88 e1       	ldi	r24, 0x18	; 24
     7d0:	fe 01       	movw	r30, r28
     7d2:	3a 96       	adiw	r30, 0x0a	; 10
     7d4:	d7 01       	movw	r26, r14
     7d6:	01 90       	ld	r0, Z+
     7d8:	0d 92       	st	X+, r0
     7da:	8a 95       	dec	r24
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <sha204e_read_config_zone+0x18a>

	return ret_code;
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	e2 96       	adiw	r28, 0x32	; 50
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	df 90       	pop	r13
     7fa:	cf 90       	pop	r12
     7fc:	08 95       	ret

000007fe <sha204p_set_device_id>:
}

uint8_t sha204p_idle(void)
{
	return sha204p_i2c_send(SHA204_I2C_PACKET_FUNCTION_IDLE, 0, NULL);
}
     7fe:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <__data_end>
     802:	08 95       	ret

00000804 <sha204p_init>:
     804:	ed d0       	rcall	.+474    	; 0x9e0 <i2c_enable>
     806:	88 ec       	ldi	r24, 0xC8	; 200
     808:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <__data_end>
     80c:	08 95       	ret

0000080e <sha204p_wakeup>:
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	1f 92       	push	r1
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	19 82       	std	Y+1, r1	; 0x01
     81a:	e6 d0       	rcall	.+460    	; 0x9e8 <i2c_send_start>
     81c:	81 11       	cpse	r24, r1
     81e:	16 c0       	rjmp	.+44     	; 0x84c <sha204p_wakeup+0x3e>
     820:	8f e3       	ldi	r24, 0x3F	; 63
     822:	9f e1       	ldi	r25, 0x1F	; 31
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <sha204p_wakeup+0x16>
     828:	00 c0       	rjmp	.+0      	; 0x82a <sha204p_wakeup+0x1c>
     82a:	00 00       	nop
     82c:	be 01       	movw	r22, r28
     82e:	6f 5f       	subi	r22, 0xFF	; 255
     830:	7f 4f       	sbci	r23, 0xFF	; 255
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	0f d1       	rcall	.+542    	; 0xa54 <i2c_send_bytes>
     836:	f7 d0       	rcall	.+494    	; 0xa26 <i2c_send_stop>
     838:	81 11       	cpse	r24, r1
     83a:	0a c0       	rjmp	.+20     	; 0x850 <sha204p_wakeup+0x42>
     83c:	8f e6       	ldi	r24, 0x6F	; 111
     83e:	97 e1       	ldi	r25, 0x17	; 23
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	f1 f7       	brne	.-4      	; 0x840 <sha204p_wakeup+0x32>
     844:	00 c0       	rjmp	.+0      	; 0x846 <sha204p_wakeup+0x38>
     846:	00 00       	nop
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	03 c0       	rjmp	.+6      	; 0x852 <sha204p_wakeup+0x44>
     84c:	80 ef       	ldi	r24, 0xF0	; 240
     84e:	01 c0       	rjmp	.+2      	; 0x852 <sha204p_wakeup+0x44>
     850:	80 ef       	ldi	r24, 0xF0	; 240
     852:	0f 90       	pop	r0
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <sha204p_send_slave_address>:
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	1f 92       	push	r1
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <__data_end>
     86a:	89 2b       	or	r24, r25
     86c:	89 83       	std	Y+1, r24	; 0x01
     86e:	bc d0       	rcall	.+376    	; 0x9e8 <i2c_send_start>
     870:	81 11       	cpse	r24, r1
     872:	0b c0       	rjmp	.+22     	; 0x88a <sha204p_send_slave_address+0x30>
     874:	be 01       	movw	r22, r28
     876:	6f 5f       	subi	r22, 0xFF	; 255
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	eb d0       	rcall	.+470    	; 0xa54 <i2c_send_bytes>
     87e:	18 2f       	mov	r17, r24
     880:	88 23       	and	r24, r24
     882:	19 f0       	breq	.+6      	; 0x88a <sha204p_send_slave_address+0x30>
     884:	d0 d0       	rcall	.+416    	; 0xa26 <i2c_send_stop>
     886:	81 2f       	mov	r24, r17
     888:	00 c0       	rjmp	.+0      	; 0x88a <sha204p_send_slave_address+0x30>
     88a:	0f 90       	pop	r0
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	08 95       	ret

00000894 <sha204p_i2c_send>:
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	1f 92       	push	r1
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	89 83       	std	Y+1, r24	; 0x01
     8a6:	16 2f       	mov	r17, r22
     8a8:	7a 01       	movw	r14, r20
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	d6 df       	rcall	.-84     	; 0x85a <sha204p_send_slave_address>
     8ae:	81 11       	cpse	r24, r1
     8b0:	15 c0       	rjmp	.+42     	; 0x8dc <sha204p_i2c_send+0x48>
     8b2:	be 01       	movw	r22, r28
     8b4:	6f 5f       	subi	r22, 0xFF	; 255
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	cc d0       	rcall	.+408    	; 0xa54 <i2c_send_bytes>
     8bc:	81 11       	cpse	r24, r1
     8be:	10 c0       	rjmp	.+32     	; 0x8e0 <sha204p_i2c_send+0x4c>
     8c0:	11 11       	cpse	r17, r1
     8c2:	03 c0       	rjmp	.+6      	; 0x8ca <sha204p_i2c_send+0x36>
     8c4:	b0 d0       	rcall	.+352    	; 0xa26 <i2c_send_stop>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <sha204p_i2c_send+0x52>
     8ca:	b7 01       	movw	r22, r14
     8cc:	81 2f       	mov	r24, r17
     8ce:	c2 d0       	rcall	.+388    	; 0xa54 <i2c_send_bytes>
     8d0:	18 2f       	mov	r17, r24
     8d2:	a9 d0       	rcall	.+338    	; 0xa26 <i2c_send_stop>
     8d4:	11 23       	and	r17, r17
     8d6:	31 f0       	breq	.+12     	; 0x8e4 <sha204p_i2c_send+0x50>
     8d8:	80 ef       	ldi	r24, 0xF0	; 240
     8da:	05 c0       	rjmp	.+10     	; 0x8e6 <sha204p_i2c_send+0x52>
     8dc:	80 ef       	ldi	r24, 0xF0	; 240
     8de:	03 c0       	rjmp	.+6      	; 0x8e6 <sha204p_i2c_send+0x52>
     8e0:	80 ef       	ldi	r24, 0xF0	; 240
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <sha204p_i2c_send+0x52>
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	0f 90       	pop	r0
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	08 95       	ret

000008f4 <sha204p_send_command>:
     8f4:	ab 01       	movw	r20, r22
     8f6:	68 2f       	mov	r22, r24
     8f8:	83 e0       	ldi	r24, 0x03	; 3
     8fa:	cc cf       	rjmp	.-104    	; 0x894 <sha204p_i2c_send>
     8fc:	08 95       	ret

000008fe <sha204p_sleep>:

uint8_t sha204p_sleep(void)
{
	return sha204p_i2c_send(SHA204_I2C_PACKET_FUNCTION_SLEEP, 0, NULL);
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	c6 cf       	rjmp	.-116    	; 0x894 <sha204p_i2c_send>
}
     908:	08 95       	ret

0000090a <sha204p_reset_io>:

uint8_t sha204p_reset_io(void)
{
	return sha204p_i2c_send(SHA204_I2C_PACKET_FUNCTION_RESET, 0, NULL);
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	c0 cf       	rjmp	.-128    	; 0x894 <sha204p_i2c_send>
}
     914:	08 95       	ret

00000916 <sha204p_receive_response>:

uint8_t sha204p_receive_response(uint8_t size, uint8_t *response)
{
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	18 2f       	mov	r17, r24
     91e:	eb 01       	movw	r28, r22
	uint8_t count;

	// Address the device and indicate that bytes are to be read.
	uint8_t i2c_status = sha204p_send_slave_address(I2C_READ);
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	9b df       	rcall	.-202    	; 0x85a <sha204p_send_slave_address>
	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS) {
     924:	88 23       	and	r24, r24
     926:	19 f0       	breq	.+6      	; 0x92e <sha204p_receive_response+0x18>
		// Translate error so that the Communication layer
		// can distinguish between a real error or the
		// device being busy executing a command.
		if (i2c_status == I2C_FUNCTION_RETCODE_NACK)
     928:	88 3f       	cpi	r24, 0xF8	; 248
     92a:	b1 f0       	breq	.+44     	; 0x958 <sha204p_receive_response+0x42>
     92c:	1a c0       	rjmp	.+52     	; 0x962 <sha204p_receive_response+0x4c>

		return i2c_status;
	}

	// Receive count byte.
	i2c_status = i2c_receive_byte(response);
     92e:	ce 01       	movw	r24, r28
     930:	ba d0       	rcall	.+372    	; 0xaa6 <i2c_receive_byte>
	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
     932:	81 11       	cpse	r24, r1
     934:	13 c0       	rjmp	.+38     	; 0x95c <sha204p_receive_response+0x46>
		return SHA204_COMM_FAIL;

	count = response[SHA204_BUFFER_POS_COUNT];
     936:	88 81       	ld	r24, Y
	if ((count < SHA204_RSP_SIZE_MIN) || (count > size)) {
     938:	84 30       	cpi	r24, 0x04	; 4
     93a:	10 f0       	brcs	.+4      	; 0x940 <sha204p_receive_response+0x2a>
     93c:	18 17       	cp	r17, r24
		(void) i2c_send_stop();
     93e:	18 f4       	brcc	.+6      	; 0x946 <sha204p_receive_response+0x30>
     940:	72 d0       	rcall	.+228    	; 0xa26 <i2c_send_stop>
		return SHA204_INVALID_SIZE;
     942:	84 ee       	ldi	r24, 0xE4	; 228
     944:	0e c0       	rjmp	.+28     	; 0x962 <sha204p_receive_response+0x4c>
	}

	i2c_status = i2c_receive_bytes(count - 1, &response[SHA204_BUFFER_POS_DATA]);
     946:	be 01       	movw	r22, r28
     948:	6f 5f       	subi	r22, 0xFF	; 255
     94a:	7f 4f       	sbci	r23, 0xFF	; 255
     94c:	81 50       	subi	r24, 0x01	; 1
     94e:	c8 d0       	rcall	.+400    	; 0xae0 <i2c_receive_bytes>

	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
     950:	88 23       	and	r24, r24
     952:	31 f0       	breq	.+12     	; 0x960 <sha204p_receive_response+0x4a>
		return SHA204_COMM_FAIL;
     954:	80 ef       	ldi	r24, 0xF0	; 240
     956:	05 c0       	rjmp	.+10     	; 0x962 <sha204p_receive_response+0x4c>
	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS) {
		// Translate error so that the Communication layer
		// can distinguish between a real error or the
		// device being busy executing a command.
		if (i2c_status == I2C_FUNCTION_RETCODE_NACK)
			i2c_status = SHA204_RX_NO_RESPONSE;
     958:	87 ee       	ldi	r24, 0xE7	; 231
     95a:	03 c0       	rjmp	.+6      	; 0x962 <sha204p_receive_response+0x4c>
	}

	// Receive count byte.
	i2c_status = i2c_receive_byte(response);
	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
		return SHA204_COMM_FAIL;
     95c:	80 ef       	ldi	r24, 0xF0	; 240
     95e:	01 c0       	rjmp	.+2      	; 0x962 <sha204p_receive_response+0x4c>
	i2c_status = i2c_receive_bytes(count - 1, &response[SHA204_BUFFER_POS_DATA]);

	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
		return SHA204_COMM_FAIL;
	else
		return SHA204_SUCCESS;
     960:	80 e0       	ldi	r24, 0x00	; 0
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	08 95       	ret

0000096a <sha204p_resync>:

uint8_t sha204p_resync(uint8_t size, uint8_t *response)
{
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	1f 92       	push	r1
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
	uint8_t nine_clocks = 0xFF;
     974:	8f ef       	ldi	r24, 0xFF	; 255
     976:	89 83       	std	Y+1, r24	; 0x01
	uint8_t ret_code = i2c_send_start();
     978:	37 d0       	rcall	.+110    	; 0x9e8 <i2c_send_start>

	// Do not evaluate the return code that most likely indicates error,
	// since nine_clocks is unlikely to be acknowledged.
	(void) i2c_send_bytes(1, &nine_clocks);
     97a:	be 01       	movw	r22, r28
     97c:	6f 5f       	subi	r22, 0xFF	; 255
     97e:	7f 4f       	sbci	r23, 0xFF	; 255
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	68 d0       	rcall	.+208    	; 0xa54 <i2c_send_bytes>

	// Send another Start. The function sends also one byte,
	// the I2C address of the device, because I2C specification
	// does not allow sending a Stop right after a Start condition.
	ret_code = sha204p_send_slave_address(I2C_READ);
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	69 df       	rcall	.-302    	; 0x85a <sha204p_send_slave_address>

	// Send only a Stop if the above call succeeded.
	// Otherwise the above function has sent it already.
	if (ret_code == I2C_FUNCTION_RETCODE_SUCCESS)
     988:	81 11       	cpse	r24, r1
     98a:	01 c0       	rjmp	.+2      	; 0x98e <sha204p_resync+0x24>
		ret_code = i2c_send_stop();
     98c:	4c d0       	rcall	.+152    	; 0xa26 <i2c_send_stop>

	// Return error status if we failed to re-sync.
	if (ret_code != I2C_FUNCTION_RETCODE_SUCCESS)
     98e:	81 11       	cpse	r24, r1
     990:	02 c0       	rjmp	.+4      	; 0x996 <sha204p_resync+0x2c>
		return SHA204_COMM_FAIL;
		
	return sha204p_reset_io();
     992:	bb df       	rcall	.-138    	; 0x90a <sha204p_reset_io>
     994:	01 c0       	rjmp	.+2      	; 0x998 <sha204p_resync+0x2e>
     996:	80 ef       	ldi	r24, 0xF0	; 240
	if (ret_code == I2C_FUNCTION_RETCODE_SUCCESS)
		ret_code = i2c_send_stop();

	// Return error status if we failed to re-sync.
	if (ret_code != I2C_FUNCTION_RETCODE_SUCCESS)
		return SHA204_COMM_FAIL;
     998:	0f 90       	pop	r0
		
	return sha204p_reset_io();
}
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <delay_10us>:

#include "sha204_timer.h"
#include <stdio.h>

void delay_10us(uint8_t delay)
{
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	1f 92       	push	r1
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t delay_10us;

	for (; delay > 0; delay--) {
     9aa:	0a c0       	rjmp	.+20     	; 0x9c0 <delay_10us+0x20>
		for (delay_10us = TIME_UTILS_LOOP_COUNT; delay_10us > 0; delay_10us--);
     9ac:	9e e0       	ldi	r25, 0x0E	; 14
     9ae:	99 83       	std	Y+1, r25	; 0x01
     9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <delay_10us+0x18>
     9b2:	99 81       	ldd	r25, Y+1	; 0x01
     9b4:	91 50       	subi	r25, 0x01	; 1
     9b6:	99 83       	std	Y+1, r25	; 0x01
     9b8:	99 81       	ldd	r25, Y+1	; 0x01
     9ba:	91 11       	cpse	r25, r1
     9bc:	fa cf       	rjmp	.-12     	; 0x9b2 <delay_10us+0x12>

void delay_10us(uint8_t delay)
{
	volatile uint8_t delay_10us;

	for (; delay > 0; delay--) {
     9be:	81 50       	subi	r24, 0x01	; 1
     9c0:	81 11       	cpse	r24, r1
     9c2:	f4 cf       	rjmp	.-24     	; 0x9ac <delay_10us+0xc>
		for (delay_10us = TIME_UTILS_LOOP_COUNT; delay_10us > 0; delay_10us--);
		TIME_UTILS_US_CALIBRATION;
	}
}
     9c4:	0f 90       	pop	r0
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <delay_ms>:

void delay_ms(uint8_t delay)
{
     9cc:	cf 93       	push	r28
     9ce:	c8 2f       	mov	r28, r24
	uint8_t i;
	for (i = delay; i > 0; i--)
     9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <delay_ms+0xc>
	delay_10us(TIME_UTILS_MS_CALIBRATION);
     9d2:	88 e6       	ldi	r24, 0x68	; 104
     9d4:	e5 df       	rcall	.-54     	; 0x9a0 <delay_10us>
}

void delay_ms(uint8_t delay)
{
	uint8_t i;
	for (i = delay; i > 0; i--)
     9d6:	c1 50       	subi	r28, 0x01	; 1
     9d8:	c1 11       	cpse	r28, r1
     9da:	fb cf       	rjmp	.-10     	; 0x9d2 <delay_ms+0x6>
	delay_10us(TIME_UTILS_MS_CALIBRATION);
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <i2c_enable>:
	TWBR = ((uint8_t) (((double) F_CPU / I2C_CLOCK - 16.0) / 2.0 + 0.5));
}

void i2c_disable(void)
{
	TWCR = 0;
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
     9e6:	08 95       	ret

000009e8 <i2c_send_start>:
uint8_t i2c_send_start(void)
{
	uint8_t timeout_counter = I2C_START_TIMEOUT;
	uint8_t i2c_status;

	TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT);
     9e8:	84 ea       	ldi	r24, 0xA4	; 164
     9ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	TWCR = 0;
}

uint8_t i2c_send_start(void)
{
	uint8_t timeout_counter = I2C_START_TIMEOUT;
     9ee:	2a ef       	ldi	r18, 0xFA	; 250
	uint8_t i2c_status;

	TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT);
	do {
		if (timeout_counter-- == 0) {
     9f0:	3f ef       	ldi	r19, 0xFF	; 255
     9f2:	32 0f       	add	r19, r18
     9f4:	22 23       	and	r18, r18
     9f6:	89 f0       	breq	.+34     	; 0xa1a <i2c_send_start+0x32>
			return I2C_FUNCTION_RETCODE_TIMEOUT;
		}
	} while ((TWCR & (TWCR & (1 << TWINT))) == 0);
     9f8:	ec eb       	ldi	r30, 0xBC	; 188
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	90 81       	ld	r25, Z
     9fe:	80 81       	ld	r24, Z
	uint8_t timeout_counter = I2C_START_TIMEOUT;
	uint8_t i2c_status;

	TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT);
	do {
		if (timeout_counter-- == 0) {
     a00:	23 2f       	mov	r18, r19
			return I2C_FUNCTION_RETCODE_TIMEOUT;
		}
	} while ((TWCR & (TWCR & (1 << TWINT))) == 0);
     a02:	80 78       	andi	r24, 0x80	; 128
     a04:	89 23       	and	r24, r25
     a06:	a1 f3       	breq	.-24     	; 0x9f0 <i2c_send_start+0x8>

	i2c_status = TW_STATUS;
     a08:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     a0c:	88 7f       	andi	r24, 0xF8	; 248
	if ((i2c_status != TW_START) && (i2c_status != TW_REP_START)) {
     a0e:	88 30       	cpi	r24, 0x08	; 8
     a10:	31 f0       	breq	.+12     	; 0xa1e <i2c_send_start+0x36>
     a12:	80 31       	cpi	r24, 0x10	; 16
     a14:	31 f4       	brne	.+12     	; 0xa22 <i2c_send_start+0x3a>
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
	}
	
	return I2C_FUNCTION_RETCODE_SUCCESS;
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	08 95       	ret
	uint8_t i2c_status;

	TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT);
	do {
		if (timeout_counter-- == 0) {
			return I2C_FUNCTION_RETCODE_TIMEOUT;
     a1a:	81 ef       	ldi	r24, 0xF1	; 241
     a1c:	08 95       	ret
	i2c_status = TW_STATUS;
	if ((i2c_status != TW_START) && (i2c_status != TW_REP_START)) {
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
	}
	
	return I2C_FUNCTION_RETCODE_SUCCESS;
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	08 95       	ret
		}
	} while ((TWCR & (TWCR & (1 << TWINT))) == 0);

	i2c_status = TW_STATUS;
	if ((i2c_status != TW_START) && (i2c_status != TW_REP_START)) {
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
     a22:	80 ef       	ldi	r24, 0xF0	; 240
	}
	
	return I2C_FUNCTION_RETCODE_SUCCESS;
}
     a24:	08 95       	ret

00000a26 <i2c_send_stop>:

uint8_t i2c_send_stop(void)
{
	uint8_t timeout_counter = I2C_STOP_TIMEOUT;

	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
     a26:	84 e9       	ldi	r24, 0x94	; 148
     a28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	return I2C_FUNCTION_RETCODE_SUCCESS;
}

uint8_t i2c_send_stop(void)
{
	uint8_t timeout_counter = I2C_STOP_TIMEOUT;
     a2c:	8a ef       	ldi	r24, 0xFA	; 250

	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
	
	do {
		if (timeout_counter-- == 0) {
     a2e:	9f ef       	ldi	r25, 0xFF	; 255
     a30:	98 0f       	add	r25, r24
     a32:	88 23       	and	r24, r24
     a34:	59 f0       	breq	.+22     	; 0xa4c <i2c_send_stop+0x26>
			return I2C_FUNCTION_RETCODE_TIMEOUT;
		}
	} while ((TWCR & (1 << TWSTO)) > 0);
     a36:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	uint8_t timeout_counter = I2C_STOP_TIMEOUT;

	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
	
	do {
		if (timeout_counter-- == 0) {
     a3a:	89 2f       	mov	r24, r25
			return I2C_FUNCTION_RETCODE_TIMEOUT;
		}
	} while ((TWCR & (1 << TWSTO)) > 0);
     a3c:	24 fd       	sbrc	r18, 4
     a3e:	f7 cf       	rjmp	.-18     	; 0xa2e <i2c_send_stop+0x8>

	if (TW_STATUS == TW_BUS_ERROR) {
     a40:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     a44:	88 7f       	andi	r24, 0xF8	; 248
     a46:	21 f4       	brne	.+8      	; 0xa50 <i2c_send_stop+0x2a>
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
     a48:	80 ef       	ldi	r24, 0xF0	; 240
     a4a:	08 95       	ret

	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
	
	do {
		if (timeout_counter-- == 0) {
			return I2C_FUNCTION_RETCODE_TIMEOUT;
     a4c:	81 ef       	ldi	r24, 0xF1	; 241
     a4e:	08 95       	ret

	if (TW_STATUS == TW_BUS_ERROR) {
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
	}

	return I2C_FUNCTION_RETCODE_SUCCESS;
     a50:	80 e0       	ldi	r24, 0x00	; 0
}
     a52:	08 95       	ret

00000a54 <i2c_send_bytes>:

uint8_t i2c_send_bytes(uint8_t count, uint8_t *data)
{
     a54:	fb 01       	movw	r30, r22
	uint8_t timeout_counter;
	uint8_t twi_status;

	for (uint8_t i = 0; i < count; i++) {
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	1e c0       	rjmp	.+60     	; 0xa96 <i2c_send_bytes+0x42>
		TWDR = *data++;
     a5a:	bf 01       	movw	r22, r30
     a5c:	6f 5f       	subi	r22, 0xFF	; 255
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	90 81       	ld	r25, Z
     a62:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
		TWCR = (1 << TWEN) | (1 << TWINT);
     a66:	94 e8       	ldi	r25, 0x84	; 132
     a68:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>

		timeout_counter = I2C_BYTE_TIMEOUT;
     a6c:	98 ec       	ldi	r25, 0xC8	; 200
		do {
			if (timeout_counter-- == 0) {
     a6e:	2f ef       	ldi	r18, 0xFF	; 255
     a70:	29 0f       	add	r18, r25
     a72:	99 23       	and	r25, r25
     a74:	a1 f0       	breq	.+40     	; 0xa9e <i2c_send_bytes+0x4a>
				return I2C_FUNCTION_RETCODE_TIMEOUT;
			}
		} while ((TWCR & (1 << TWINT)) == 0);
     a76:	30 91 bc 00 	lds	r19, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
		TWDR = *data++;
		TWCR = (1 << TWEN) | (1 << TWINT);

		timeout_counter = I2C_BYTE_TIMEOUT;
		do {
			if (timeout_counter-- == 0) {
     a7a:	92 2f       	mov	r25, r18
				return I2C_FUNCTION_RETCODE_TIMEOUT;
			}
		} while ((TWCR & (1 << TWINT)) == 0);
     a7c:	33 23       	and	r19, r19
     a7e:	bc f7       	brge	.-18     	; 0xa6e <i2c_send_bytes+0x1a>

		twi_status = TW_STATUS;
     a80:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     a84:	98 7f       	andi	r25, 0xF8	; 248
		if ((twi_status != TW_MT_SLA_ACK)
     a86:	98 31       	cpi	r25, 0x18	; 24
     a88:	21 f0       	breq	.+8      	; 0xa92 <i2c_send_bytes+0x3e>
		&& (twi_status != TW_MT_DATA_ACK)
     a8a:	98 32       	cpi	r25, 0x28	; 40
     a8c:	11 f0       	breq	.+4      	; 0xa92 <i2c_send_bytes+0x3e>
		&& (twi_status != TW_MR_SLA_ACK))
     a8e:	90 34       	cpi	r25, 0x40	; 64
     a90:	41 f4       	brne	.+16     	; 0xaa2 <i2c_send_bytes+0x4e>
uint8_t i2c_send_bytes(uint8_t count, uint8_t *data)
{
	uint8_t timeout_counter;
	uint8_t twi_status;

	for (uint8_t i = 0; i < count; i++) {
     a92:	4f 5f       	subi	r20, 0xFF	; 255
		TWDR = *data++;
     a94:	fb 01       	movw	r30, r22
uint8_t i2c_send_bytes(uint8_t count, uint8_t *data)
{
	uint8_t timeout_counter;
	uint8_t twi_status;

	for (uint8_t i = 0; i < count; i++) {
     a96:	48 17       	cp	r20, r24
     a98:	00 f3       	brcs	.-64     	; 0xa5a <i2c_send_bytes+0x6>
		&& (twi_status != TW_MR_SLA_ACK))
		
		return I2C_FUNCTION_RETCODE_NACK;
	}

	return I2C_FUNCTION_RETCODE_SUCCESS;
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	08 95       	ret
		TWCR = (1 << TWEN) | (1 << TWINT);

		timeout_counter = I2C_BYTE_TIMEOUT;
		do {
			if (timeout_counter-- == 0) {
				return I2C_FUNCTION_RETCODE_TIMEOUT;
     a9e:	81 ef       	ldi	r24, 0xF1	; 241
     aa0:	08 95       	ret
		twi_status = TW_STATUS;
		if ((twi_status != TW_MT_SLA_ACK)
		&& (twi_status != TW_MT_DATA_ACK)
		&& (twi_status != TW_MR_SLA_ACK))
		
		return I2C_FUNCTION_RETCODE_NACK;
     aa2:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return I2C_FUNCTION_RETCODE_SUCCESS;
}
     aa4:	08 95       	ret

00000aa6 <i2c_receive_byte>:

uint8_t i2c_receive_byte(uint8_t *data)
{
     aa6:	fc 01       	movw	r30, r24
	uint8_t timeout_counter = I2C_BYTE_TIMEOUT;

	// Enable acknowledging data.
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWEA));
     aa8:	94 ec       	ldi	r25, 0xC4	; 196
     aaa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	return I2C_FUNCTION_RETCODE_SUCCESS;
}

uint8_t i2c_receive_byte(uint8_t *data)
{
	uint8_t timeout_counter = I2C_BYTE_TIMEOUT;
     aae:	98 ec       	ldi	r25, 0xC8	; 200

	// Enable acknowledging data.
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWEA));
	do {
		if (timeout_counter-- == 0)
     ab0:	2f ef       	ldi	r18, 0xFF	; 255
     ab2:	29 0f       	add	r18, r25
     ab4:	99 23       	and	r25, r25
     ab6:	91 f0       	breq	.+36     	; 0xadc <i2c_receive_byte+0x36>
			return I2C_FUNCTION_RETCODE_TIMEOUT;
	} while ((TWCR & (1 << TWINT)) == 0);
     ab8:	30 91 bc 00 	lds	r19, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	uint8_t timeout_counter = I2C_BYTE_TIMEOUT;

	// Enable acknowledging data.
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWEA));
	do {
		if (timeout_counter-- == 0)
     abc:	92 2f       	mov	r25, r18
			return I2C_FUNCTION_RETCODE_TIMEOUT;
	} while ((TWCR & (1 << TWINT)) == 0);
     abe:	33 23       	and	r19, r19
     ac0:	bc f7       	brge	.-18     	; 0xab0 <i2c_receive_byte+0xa>

	if (TW_STATUS != TW_MR_DATA_ACK) {
     ac2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     ac6:	98 7f       	andi	r25, 0xF8	; 248
     ac8:	90 35       	cpi	r25, 0x50	; 80
     aca:	19 f0       	breq	.+6      	; 0xad2 <i2c_receive_byte+0x2c>
		// Do not override original error.
		(void) i2c_send_stop();
     acc:	ac df       	rcall	.-168    	; 0xa26 <i2c_send_stop>
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
     ace:	80 ef       	ldi	r24, 0xF0	; 240
     ad0:	08 95       	ret
	}
	*data = TWDR;
     ad2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     ad6:	80 83       	st	Z, r24

	return I2C_FUNCTION_RETCODE_SUCCESS;
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	08 95       	ret

	// Enable acknowledging data.
	TWCR = ((1 << TWEN) | (1 << TWINT) | (1 << TWEA));
	do {
		if (timeout_counter-- == 0)
			return I2C_FUNCTION_RETCODE_TIMEOUT;
     adc:	81 ef       	ldi	r24, 0xF1	; 241
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
	}
	*data = TWDR;

	return I2C_FUNCTION_RETCODE_SUCCESS;
}
     ade:	08 95       	ret

00000ae0 <i2c_receive_bytes>:

uint8_t i2c_receive_bytes(uint8_t count, uint8_t *data)
{
     ae0:	fb 01       	movw	r30, r22
	uint8_t timeout_counter;
	
	// acknowledge all bytes except the last one
	
	for (uint8_t i = 0; i < count - 1; i++) {
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	1a c0       	rjmp	.+52     	; 0xb1a <i2c_receive_bytes+0x3a>
		// Enable acknowledging data.
		TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
     ae6:	94 ec       	ldi	r25, 0xC4	; 196
     ae8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
		timeout_counter = I2C_BYTE_TIMEOUT;
     aec:	98 ec       	ldi	r25, 0xC8	; 200
		do {
			if (timeout_counter-- == 0)
     aee:	2f ef       	ldi	r18, 0xFF	; 255
     af0:	29 0f       	add	r18, r25
     af2:	99 23       	and	r25, r25
     af4:	a9 f1       	breq	.+106    	; 0xb60 <i2c_receive_bytes+0x80>
				return I2C_FUNCTION_RETCODE_TIMEOUT;
		} while ((TWCR & ((1 << TWINT))) == 0);
     af6:	30 91 bc 00 	lds	r19, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	for (uint8_t i = 0; i < count - 1; i++) {
		// Enable acknowledging data.
		TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
		timeout_counter = I2C_BYTE_TIMEOUT;
		do {
			if (timeout_counter-- == 0)
     afa:	92 2f       	mov	r25, r18
				return I2C_FUNCTION_RETCODE_TIMEOUT;
		} while ((TWCR & ((1 << TWINT))) == 0);
     afc:	33 23       	and	r19, r19
     afe:	bc f7       	brge	.-18     	; 0xaee <i2c_receive_bytes+0xe>

		if (TW_STATUS != TW_MR_DATA_ACK) {
     b00:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     b04:	98 7f       	andi	r25, 0xF8	; 248
     b06:	90 35       	cpi	r25, 0x50	; 80
     b08:	19 f0       	breq	.+6      	; 0xb10 <i2c_receive_bytes+0x30>
			// Do not override original error.
			(void) i2c_send_stop();
     b0a:	8d df       	rcall	.-230    	; 0xa26 <i2c_send_stop>
			return I2C_FUNCTION_RETCODE_COMM_FAIL;
     b0c:	80 ef       	ldi	r24, 0xF0	; 240
     b0e:	08 95       	ret
		}
		*data++ = TWDR;
     b10:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     b14:	90 83       	st	Z, r25
{
	uint8_t timeout_counter;
	
	// acknowledge all bytes except the last one
	
	for (uint8_t i = 0; i < count - 1; i++) {
     b16:	7f 5f       	subi	r23, 0xFF	; 255
		if (TW_STATUS != TW_MR_DATA_ACK) {
			// Do not override original error.
			(void) i2c_send_stop();
			return I2C_FUNCTION_RETCODE_COMM_FAIL;
		}
		*data++ = TWDR;
     b18:	31 96       	adiw	r30, 0x01	; 1
{
	uint8_t timeout_counter;
	
	// acknowledge all bytes except the last one
	
	for (uint8_t i = 0; i < count - 1; i++) {
     b1a:	47 2f       	mov	r20, r23
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	28 2f       	mov	r18, r24
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	21 50       	subi	r18, 0x01	; 1
     b24:	31 09       	sbc	r19, r1
     b26:	42 17       	cp	r20, r18
     b28:	53 07       	cpc	r21, r19
     b2a:	ec f2       	brlt	.-70     	; 0xae6 <i2c_receive_bytes+0x6>
		}
		*data++ = TWDR;
	}

	// disable acknowledging data for the last byte
	TWCR = ((1 << TWEN) | (1 << TWINT));
     b2c:	84 e8       	ldi	r24, 0x84	; 132
     b2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	timeout_counter = I2C_BYTE_TIMEOUT;
     b32:	88 ec       	ldi	r24, 0xC8	; 200
	do {
		if (timeout_counter-- == 0)
     b34:	2f ef       	ldi	r18, 0xFF	; 255
     b36:	28 0f       	add	r18, r24
     b38:	88 23       	and	r24, r24
     b3a:	a1 f0       	breq	.+40     	; 0xb64 <i2c_receive_bytes+0x84>
			return I2C_FUNCTION_RETCODE_TIMEOUT;
	} while ((TWCR & (1 << TWINT)) == 0);
     b3c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>

	// disable acknowledging data for the last byte
	TWCR = ((1 << TWEN) | (1 << TWINT));
	timeout_counter = I2C_BYTE_TIMEOUT;
	do {
		if (timeout_counter-- == 0)
     b40:	82 2f       	mov	r24, r18
			return I2C_FUNCTION_RETCODE_TIMEOUT;
	} while ((TWCR & (1 << TWINT)) == 0);
     b42:	99 23       	and	r25, r25
     b44:	bc f7       	brge	.-18     	; 0xb34 <i2c_receive_bytes+0x54>

	if (TW_STATUS != TW_MR_DATA_NACK) {
     b46:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     b4a:	88 7f       	andi	r24, 0xF8	; 248
     b4c:	88 35       	cpi	r24, 0x58	; 88
		// do not override original error.
		(void) i2c_send_stop();
     b4e:	19 f0       	breq	.+6      	; 0xb56 <i2c_receive_bytes+0x76>
     b50:	6a df       	rcall	.-300    	; 0xa26 <i2c_send_stop>
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
     b52:	80 ef       	ldi	r24, 0xF0	; 240
     b54:	08 95       	ret
	}
	*data = TWDR;
     b56:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>

	return i2c_send_stop();
     b5a:	80 83       	st	Z, r24
     b5c:	64 cf       	rjmp	.-312    	; 0xa26 <i2c_send_stop>
     b5e:	08 95       	ret
		// Enable acknowledging data.
		TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
		timeout_counter = I2C_BYTE_TIMEOUT;
		do {
			if (timeout_counter-- == 0)
				return I2C_FUNCTION_RETCODE_TIMEOUT;
     b60:	81 ef       	ldi	r24, 0xF1	; 241
     b62:	08 95       	ret
	// disable acknowledging data for the last byte
	TWCR = ((1 << TWEN) | (1 << TWINT));
	timeout_counter = I2C_BYTE_TIMEOUT;
	do {
		if (timeout_counter-- == 0)
			return I2C_FUNCTION_RETCODE_TIMEOUT;
     b64:	81 ef       	ldi	r24, 0xF1	; 241
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
	}
	*data = TWDR;

	return i2c_send_stop();
}
     b66:	08 95       	ret

00000b68 <UART_init>:
#include <stdio.h>
#include <avr/io.h>
 

void UART_init(uint16_t Baudrate)
{
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
	int ubrr = ((F_CPU/16/Baudrate)-1);
     b6c:	9c 01       	movw	r18, r24
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	60 e2       	ldi	r22, 0x20	; 32
     b74:	71 ea       	ldi	r23, 0xA1	; 161
     b76:	87 e0       	ldi	r24, 0x07	; 7
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	27 d2       	rcall	.+1102   	; 0xfca <__divmodsi4>
     b7c:	21 50       	subi	r18, 0x01	; 1
     b7e:	31 09       	sbc	r19, r1
	UBRR1H = (uint8_t)(ubrr>>8);
     b80:	cd ec       	ldi	r28, 0xCD	; 205
     b82:	d0 e0       	ldi	r29, 0x00	; 0
     b84:	38 83       	st	Y, r19
	UBRR1L = (uint8_t)ubrr;
     b86:	ac ec       	ldi	r26, 0xCC	; 204
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	2c 93       	st	X, r18
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     b8c:	69 ec       	ldi	r22, 0xC9	; 201
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	98 e1       	ldi	r25, 0x18	; 24
     b92:	fb 01       	movw	r30, r22
     b94:	90 83       	st	Z, r25
	
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     b96:	4a ec       	ldi	r20, 0xCA	; 202
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	fa 01       	movw	r30, r20
     b9c:	80 81       	ld	r24, Z
     b9e:	86 60       	ori	r24, 0x06	; 6
     ba0:	80 83       	st	Z, r24
	
	UBRR1H = (uint8_t)(ubrr>>8);
     ba2:	38 83       	st	Y, r19
	UBRR1L = (uint8_t)ubrr;
     ba4:	2c 93       	st	X, r18
	
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     ba6:	fb 01       	movw	r30, r22
     ba8:	90 83       	st	Z, r25
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <UART_SendChar>:

void UART_SendChar(uint8_t data)
{
	while (!( UCSR1A & (1<<UDRE0))) ;
     bb0:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     bb4:	95 ff       	sbrs	r25, 5
     bb6:	fc cf       	rjmp	.-8      	; 0xbb0 <UART_SendChar>
	UDR1 = data;
     bb8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
     bbc:	08 95       	ret

00000bbe <UART_SendString>:
}

void UART_SendString(char *text)
{
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	ec 01       	movw	r28, r24
	while (*text != '\0')
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <UART_SendString+0xc>
    {
        UART_SendChar(*text);
     bc6:	f4 df       	rcall	.-24     	; 0xbb0 <UART_SendChar>
        text++;
     bc8:	21 96       	adiw	r28, 0x01	; 1
	UDR1 = data;
}

void UART_SendString(char *text)
{
	while (*text != '\0')
     bca:	88 81       	ld	r24, Y
     bcc:	81 11       	cpse	r24, r1
    {
        UART_SendChar(*text);
        text++;
    }
    // After the loop, send the null terminator
    UART_SendChar('\0');
     bce:	fb cf       	rjmp	.-10     	; 0xbc6 <UART_SendString+0x8>
     bd0:	ef df       	rcall	.-34     	; 0xbb0 <UART_SendChar>
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <printCHAR>:


int printCHAR(char character, FILE *stream)
{
	while ((UCSR1A & (1 << UDRE1)) == 0) ;
     bd8:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
     bdc:	95 ff       	sbrs	r25, 5
     bde:	fc cf       	rjmp	.-8      	; 0xbd8 <printCHAR>

	UDR1 = character;
     be0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

	return 0;
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	08 95       	ret

00000bea <board_init>:

void board_init();

void board_init() {
	
	cli();
     bea:	f8 94       	cli
	UART_init(38400);
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	96 e9       	ldi	r25, 0x96	; 150
     bf0:	bb df       	rcall	.-138    	; 0xb68 <UART_init>
	UCSR1B |= (1 << RXCIE1);// UART receive interrupt enable
     bf2:	e9 ec       	ldi	r30, 0xC9	; 201
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	80 68       	ori	r24, 0x80	; 128
     bfa:	80 83       	st	Z, r24
	stdout = &uart_str;
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	92 e0       	ldi	r25, 0x02	; 2
     c00:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <__iob+0x3>
     c04:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <__iob+0x2>
	
	sei(); // enable interrupts
     c08:	78 94       	sei
     c0a:	08 95       	ret

00000c0c <main>:
}

int main(void) {
     c0c:	ef 92       	push	r14
     c0e:	ff 92       	push	r15
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	cf 59       	subi	r28, 0x9F	; 159
     c1e:	d1 40       	sbci	r29, 0x01	; 1
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
	
	board_init();
     c2a:	df df       	rcall	.-66     	; 0xbea <board_init>
	
	UART_SendChar(27);					//escape
     c2c:	8b e1       	ldi	r24, 0x1B	; 27
     c2e:	c0 df       	rcall	.-128    	; 0xbb0 <UART_SendChar>
	UART_SendString("[2J");				//clear and home
     c30:	8e e0       	ldi	r24, 0x0E	; 14
     c32:	92 e0       	ldi	r25, 0x02	; 2
	UART_SendChar(27);					//escape
     c34:	c4 df       	rcall	.-120    	; 0xbbe <UART_SendString>
     c36:	8b e1       	ldi	r24, 0x1B	; 27
	UART_SendString("[0;32;40m");		//barva pozadi a textu
     c38:	bb df       	rcall	.-138    	; 0xbb0 <UART_SendChar>
     c3a:	82 e1       	ldi	r24, 0x12	; 18
     c3c:	92 e0       	ldi	r25, 0x02	; 2
	
	sha204p_init();
     c3e:	bf df       	rcall	.-130    	; 0xbbe <UART_SendString>
     c40:	e1 dd       	rcall	.-1086   	; 0x804 <sha204p_init>
	
	uint8_t response[SHA204_RSP_SIZE_MAX];
	uint8_t wakeup_status = sha204c_wakeup(response);
     c42:	ce 01       	movw	r24, r28
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	f5 da       	rcall	.-2582   	; 0x232 <sha204c_wakeup>
     c48:	88 23       	and	r24, r24
	
	// ********************* WAKEUP *********************
	
	if (wakeup_status != SHA204_SUCCESS) {
     c4a:	61 f0       	breq	.+24     	; 0xc64 <main+0x58>
		printf("Error: SHA204 wakeup failed! Return code: %d\n\r", wakeup_status);
     c4c:	1f 92       	push	r1
     c4e:	8f 93       	push	r24
     c50:	8c e1       	ldi	r24, 0x1C	; 28
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	9f 93       	push	r25
     c56:	8f 93       	push	r24
     c58:	ff d1       	rcall	.+1022   	; 0x1058 <printf>
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	07 c0       	rjmp	.+14     	; 0xc72 <main+0x66>
	} else {
		printf("SHA204 device woken up successfully!\n\r");
     c64:	8b e4       	ldi	r24, 0x4B	; 75
     c66:	92 e0       	ldi	r25, 0x02	; 2
     c68:	9f 93       	push	r25
     c6a:	8f 93       	push	r24
     c6c:	f5 d1       	rcall	.+1002   	; 0x1058 <printf>
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	// ********************* COMMAND *********************
	
	uint8_t my_command[] = {0x03, 0x00, 0x00, 0x00};
     c74:	8c a3       	std	Y+36, r24	; 0x24
     c76:	1d a2       	std	Y+37, r1	; 0x25
     c78:	1e a2       	std	Y+38, r1	; 0x26
     c7a:	1f a2       	std	Y+39, r1	; 0x27
	
	uint8_t send_status = sha204p_send_command(sizeof(my_command), my_command);
     c7c:	be 01       	movw	r22, r28
     c7e:	6c 5d       	subi	r22, 0xDC	; 220
     c80:	7f 4f       	sbci	r23, 0xFF	; 255
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	37 de       	rcall	.-914    	; 0x8f4 <sha204p_send_command>
	if (send_status != SHA204_SUCCESS) {
     c86:	88 23       	and	r24, r24
     c88:	61 f0       	breq	.+24     	; 0xca2 <main+0x96>
		printf("Error: Failed to send command to SHA204 device! Return code:  %d\n\r", send_status);
     c8a:	1f 92       	push	r1
     c8c:	8f 93       	push	r24
     c8e:	82 e7       	ldi	r24, 0x72	; 114
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	e0 d1       	rcall	.+960    	; 0x1058 <printf>
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	07 c0       	rjmp	.+14     	; 0xcb0 <main+0xa4>
	} else {
		printf("Command sent successfully to SHA204 device!\n\r");
     ca2:	85 eb       	ldi	r24, 0xB5	; 181
     ca4:	92 e0       	ldi	r25, 0x02	; 2
     ca6:	9f 93       	push	r25
     ca8:	8f 93       	push	r24
     caa:	d6 d1       	rcall	.+940    	; 0x1058 <printf>
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
	}
	
	// ********************* RESPONSE *********************
	
	uint8_t receive_status = sha204p_receive_response(sizeof(response), response);
     cb0:	be 01       	movw	r22, r28
     cb2:	6f 5f       	subi	r22, 0xFF	; 255
     cb4:	7f 4f       	sbci	r23, 0xFF	; 255
     cb6:	83 e2       	ldi	r24, 0x23	; 35
     cb8:	2e de       	rcall	.-932    	; 0x916 <sha204p_receive_response>
	if (receive_status != SHA204_SUCCESS) {
     cba:	88 23       	and	r24, r24
     cbc:	71 f0       	breq	.+28     	; 0xcda <main+0xce>
		printf("Error: Failed to receive response from SHA204 device! Return code:  %d\n\r", receive_status);
     cbe:	1f 92       	push	r1
     cc0:	8f 93       	push	r24
     cc2:	83 ee       	ldi	r24, 0xE3	; 227
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	9f 93       	push	r25
     cc8:	8f 93       	push	r24
     cca:	c6 d1       	rcall	.+908    	; 0x1058 <printf>
		return 1;
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
	} else {
		printf("Response received successfully from SHA204 device!\n\r");
     cd8:	6a c1       	rjmp	.+724    	; 0xfae <main+0x3a2>
     cda:	8c e2       	ldi	r24, 0x2C	; 44
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	9f 93       	push	r25
     ce0:	8f 93       	push	r24
     ce2:	ba d1       	rcall	.+884    	; 0x1058 <printf>
	// ********************* CTENI SERIOVEHO CISLA *********************
	
	uint8_t tx_buffer[10];
	uint8_t sn[9];

	volatile uint8_t sn_read_status = sha204e_read_serial_number(tx_buffer, sn);
     ce4:	be 01       	movw	r22, r28
     ce6:	6e 5c       	subi	r22, 0xCE	; 206
     ce8:	7f 4f       	sbci	r23, 0xFF	; 255
     cea:	ce 01       	movw	r24, r28
     cec:	88 96       	adiw	r24, 0x28	; 40
     cee:	77 dc       	rcall	.-1810   	; 0x5de <sha204e_read_serial_number>
     cf0:	8b af       	std	Y+59, r24	; 0x3b

	if (sn_read_status == SHA204_SUCCESS) {
     cf2:	8b ad       	ldd	r24, Y+59	; 0x3b
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	81 11       	cpse	r24, r1
     cfa:	22 c0       	rjmp	.+68     	; 0xd40 <main+0x134>
		printf("Serial number read successfully: ");
     cfc:	81 e6       	ldi	r24, 0x61	; 97
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	9f 93       	push	r25
     d02:	8f 93       	push	r24
     d04:	a9 d1       	rcall	.+850    	; 0x1058 <printf>
     d06:	0f 90       	pop	r0
		for (int i = 0; i < 9; i++) {
     d08:	0f 90       	pop	r0
     d0a:	00 e0       	ldi	r16, 0x00	; 0
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	14 c0       	rjmp	.+40     	; 0xd38 <main+0x12c>
			printf("%02X ", sn[i]);
     d10:	e2 e3       	ldi	r30, 0x32	; 50
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	ec 0f       	add	r30, r28
     d16:	fd 1f       	adc	r31, r29
     d18:	e0 0f       	add	r30, r16
     d1a:	f1 1f       	adc	r31, r17
     d1c:	80 81       	ld	r24, Z
     d1e:	1f 92       	push	r1
     d20:	8f 93       	push	r24
     d22:	83 e8       	ldi	r24, 0x83	; 131
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	9f 93       	push	r25
     d28:	8f 93       	push	r24
     d2a:	96 d1       	rcall	.+812    	; 0x1058 <printf>

	volatile uint8_t sn_read_status = sha204e_read_serial_number(tx_buffer, sn);

	if (sn_read_status == SHA204_SUCCESS) {
		printf("Serial number read successfully: ");
		for (int i = 0; i < 9; i++) {
     d2c:	0f 5f       	subi	r16, 0xFF	; 255
     d2e:	1f 4f       	sbci	r17, 0xFF	; 255
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	09 30       	cpi	r16, 0x09	; 9
     d3a:	11 05       	cpc	r17, r1
     d3c:	4c f3       	brlt	.-46     	; 0xd10 <main+0x104>
			printf("%02X ", sn[i]);
		}
	} else {
		printf("Error reading serial number! Return code:  %d", sn_read_status);
     d3e:	0c c0       	rjmp	.+24     	; 0xd58 <main+0x14c>
     d40:	8b ad       	ldd	r24, Y+59	; 0x3b
     d42:	1f 92       	push	r1
     d44:	8f 93       	push	r24
     d46:	89 e8       	ldi	r24, 0x89	; 137
     d48:	93 e0       	ldi	r25, 0x03	; 3
     d4a:	9f 93       	push	r25
     d4c:	8f 93       	push	r24
     d4e:	84 d1       	rcall	.+776    	; 0x1058 <printf>
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
	}
	
	printf("\n\r");
     d56:	0f 90       	pop	r0
     d58:	8e e5       	ldi	r24, 0x5E	; 94
     d5a:	93 e0       	ldi	r25, 0x03	; 3
     d5c:	9f 93       	push	r25
     d5e:	8f 93       	push	r24
     d60:	7b d1       	rcall	.+758    	; 0x1058 <printf>
	
	uint8_t command[SHA204_CMD_SIZE_MAX];
	uint8_t response_random[RANDOM_RSP_SIZE];
	uint8_t *random_number = &response_random[SHA204_BUFFER_POS_DATA];
	
	volatile uint8_t rand_gen_status = sha204m_random(command, response_random, RANDOM_NO_SEED_UPDATE);
     d62:	41 e0       	ldi	r20, 0x01	; 1
     d64:	be 01       	movw	r22, r28
     d66:	60 57       	subi	r22, 0x70	; 112
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	ce 01       	movw	r24, r28
     d6c:	cc 96       	adiw	r24, 0x3c	; 60
     d6e:	57 db       	rcall	.-2386   	; 0x41e <sha204m_random>
     d70:	cd 54       	subi	r28, 0x4D	; 77
     d72:	df 4f       	sbci	r29, 0xFF	; 255
     d74:	88 83       	st	Y, r24
     d76:	c3 5b       	subi	r28, 0xB3	; 179
     d78:	d0 40       	sbci	r29, 0x00	; 0
	
	if (rand_gen_status == SHA204_SUCCESS) {
     d7a:	cd 54       	subi	r28, 0x4D	; 77
     d7c:	df 4f       	sbci	r29, 0xFF	; 255
     d7e:	88 81       	ld	r24, Y
     d80:	c3 5b       	subi	r28, 0xB3	; 179
     d82:	d0 40       	sbci	r29, 0x00	; 0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	81 11       	cpse	r24, r1
     d8a:	23 c0       	rjmp	.+70     	; 0xdd2 <main+0x1c6>
		
		printf("Random number generated successfully: ");
     d8c:	87 eb       	ldi	r24, 0xB7	; 183
     d8e:	93 e0       	ldi	r25, 0x03	; 3
     d90:	9f 93       	push	r25
     d92:	8f 93       	push	r24
     d94:	61 d1       	rcall	.+706    	; 0x1058 <printf>
		for (int i = 0; i < RANDOM_RSP_SIZE - SHA204_BUFFER_POS_DATA; i++) {
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	00 e0       	ldi	r16, 0x00	; 0
     d9c:	10 e0       	ldi	r17, 0x00	; 0
     d9e:	14 c0       	rjmp	.+40     	; 0xdc8 <main+0x1bc>
			printf("%02X ", random_number[i]);
     da0:	e1 e9       	ldi	r30, 0x91	; 145
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	ec 0f       	add	r30, r28
     da6:	fd 1f       	adc	r31, r29
     da8:	e0 0f       	add	r30, r16
     daa:	f1 1f       	adc	r31, r17
     dac:	80 81       	ld	r24, Z
     dae:	1f 92       	push	r1
     db0:	8f 93       	push	r24
     db2:	83 e8       	ldi	r24, 0x83	; 131
     db4:	93 e0       	ldi	r25, 0x03	; 3
     db6:	9f 93       	push	r25
     db8:	8f 93       	push	r24
     dba:	4e d1       	rcall	.+668    	; 0x1058 <printf>
	volatile uint8_t rand_gen_status = sha204m_random(command, response_random, RANDOM_NO_SEED_UPDATE);
	
	if (rand_gen_status == SHA204_SUCCESS) {
		
		printf("Random number generated successfully: ");
		for (int i = 0; i < RANDOM_RSP_SIZE - SHA204_BUFFER_POS_DATA; i++) {
     dbc:	0f 5f       	subi	r16, 0xFF	; 255
     dbe:	1f 4f       	sbci	r17, 0xFF	; 255
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	02 32       	cpi	r16, 0x22	; 34
     dca:	11 05       	cpc	r17, r1
			printf("%02X ", random_number[i]);
		}
		sha204e_sleep();
     dcc:	4c f3       	brlt	.-46     	; 0xda0 <main+0x194>
     dce:	05 dc       	rcall	.-2038   	; 0x5da <sha204e_sleep>
     dd0:	10 c0       	rjmp	.+32     	; 0xdf2 <main+0x1e6>
	} else {
		printf("Error generating random number! %d", rand_gen_status);
     dd2:	cd 54       	subi	r28, 0x4D	; 77
     dd4:	df 4f       	sbci	r29, 0xFF	; 255
     dd6:	88 81       	ld	r24, Y
     dd8:	c3 5b       	subi	r28, 0xB3	; 179
     dda:	d0 40       	sbci	r29, 0x00	; 0
     ddc:	1f 92       	push	r1
     dde:	8f 93       	push	r24
     de0:	8e ed       	ldi	r24, 0xDE	; 222
     de2:	93 e0       	ldi	r25, 0x03	; 3
     de4:	9f 93       	push	r25
     de6:	8f 93       	push	r24
     de8:	37 d1       	rcall	.+622    	; 0x1058 <printf>
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0e e5       	ldi	r16, 0x5E	; 94
	}
	
	printf("\n\r");
     df4:	13 e0       	ldi	r17, 0x03	; 3
     df6:	1f 93       	push	r17
     df8:	0f 93       	push	r16
     dfa:	2e d1       	rcall	.+604    	; 0x1058 <printf>
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	cc 54       	subi	r28, 0x4C	; 76
	
	// ********************* CRC *********************
	
	uint8_t data[] = {0x02, 0x02, 0x03, 0x07};
     e00:	df 4f       	sbci	r29, 0xFF	; 255
     e02:	88 83       	st	Y, r24
     e04:	c4 5b       	subi	r28, 0xB4	; 180
     e06:	d0 40       	sbci	r29, 0x00	; 0
     e08:	cb 54       	subi	r28, 0x4B	; 75
     e0a:	df 4f       	sbci	r29, 0xFF	; 255
     e0c:	88 83       	st	Y, r24
     e0e:	c5 5b       	subi	r28, 0xB5	; 181
     e10:	d0 40       	sbci	r29, 0x00	; 0
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	ca 54       	subi	r28, 0x4A	; 74
     e16:	df 4f       	sbci	r29, 0xFF	; 255
     e18:	88 83       	st	Y, r24
     e1a:	c6 5b       	subi	r28, 0xB6	; 182
     e1c:	d0 40       	sbci	r29, 0x00	; 0
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	c9 54       	subi	r28, 0x49	; 73
     e22:	df 4f       	sbci	r29, 0xFF	; 255
     e24:	88 83       	st	Y, r24
     e26:	c7 5b       	subi	r28, 0xB7	; 183
     e28:	d0 40       	sbci	r29, 0x00	; 0
     e2a:	ae 01       	movw	r20, r28
    uint8_t crc[2];
	
	sha204c_calculate_crc(sizeof(data), data, crc);
     e2c:	48 54       	subi	r20, 0x48	; 72
     e2e:	5f 4f       	sbci	r21, 0xFF	; 255
     e30:	be 01       	movw	r22, r28
     e32:	6c 54       	subi	r22, 0x4C	; 76
     e34:	7f 4f       	sbci	r23, 0xFF	; 255
     e36:	84 e0       	ldi	r24, 0x04	; 4
     e38:	9e d9       	rcall	.-3268   	; 0x176 <sha204c_calculate_crc>
    printf("CRC: 0x%02X%02X", crc[1], crc[0]);
     e3a:	c8 54       	subi	r28, 0x48	; 72
     e3c:	df 4f       	sbci	r29, 0xFF	; 255
     e3e:	98 81       	ld	r25, Y
     e40:	c8 5b       	subi	r28, 0xB8	; 184
     e42:	d0 40       	sbci	r29, 0x00	; 0
     e44:	c7 54       	subi	r28, 0x47	; 71
     e46:	df 4f       	sbci	r29, 0xFF	; 255
     e48:	88 81       	ld	r24, Y
     e4a:	c9 5b       	subi	r28, 0xB9	; 185
     e4c:	d0 40       	sbci	r29, 0x00	; 0
     e4e:	1f 92       	push	r1
     e50:	9f 93       	push	r25
     e52:	1f 92       	push	r1
     e54:	8f 93       	push	r24
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	94 e0       	ldi	r25, 0x04	; 4
     e5a:	9f 93       	push	r25
     e5c:	8f 93       	push	r24
     e5e:	fc d0       	rcall	.+504    	; 0x1058 <printf>
	
	// overeni: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html (CRC-16, Custom, Input reflected, Poly 0x8005, Init/Final value 0x0)
	
	printf("\n\r");
     e60:	1f 93       	push	r17
     e62:	0f 93       	push	r16
     e64:	f9 d0       	rcall	.+498    	; 0x1058 <printf>
     e66:	be 01       	movw	r22, r28
	
	// ********************* READ CONFIG ZONE *********************
	
	uint8_t config_data[88];
	uint8_t device_id = 0xC8;
	uint8_t read_config_status = sha204e_read_config_zone(device_id, config_data);
     e68:	66 54       	subi	r22, 0x46	; 70
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255
     e6c:	88 ec       	ldi	r24, 0xC8	; 200
     e6e:	ee db       	rcall	.-2084   	; 0x64c <sha204e_read_config_zone>
     e70:	18 2f       	mov	r17, r24
     e72:	81 e1       	ldi	r24, 0x11	; 17

	printf("Config zone:\n\r");
     e74:	94 e0       	ldi	r25, 0x04	; 4
     e76:	9f 93       	push	r25
     e78:	8f 93       	push	r24
     e7a:	ee d0       	rcall	.+476    	; 0x1058 <printf>
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
	if (read_config_status == SHA204_SUCCESS) {
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	11 23       	and	r17, r17
     e88:	d1 f0       	breq	.+52     	; 0xebe <main+0x2b2>
     e8a:	1f c0       	rjmp	.+62     	; 0xeca <main+0x2be>
     e8c:	ea eb       	ldi	r30, 0xBA	; 186
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
		for (int i = 0; i < 88; i++) {
			printf("Byte %d: 0x%02X\n\r", i, config_data[i]);
     e90:	ec 0f       	add	r30, r28
     e92:	fd 1f       	adc	r31, r29
     e94:	e0 0f       	add	r30, r16
     e96:	f1 1f       	adc	r31, r17
     e98:	80 81       	ld	r24, Z
     e9a:	1f 92       	push	r1
     e9c:	8f 93       	push	r24
     e9e:	1f 93       	push	r17
     ea0:	0f 93       	push	r16
     ea2:	80 e2       	ldi	r24, 0x20	; 32
     ea4:	94 e0       	ldi	r25, 0x04	; 4
     ea6:	9f 93       	push	r25
     ea8:	8f 93       	push	r24
     eaa:	d6 d0       	rcall	.+428    	; 0x1058 <printf>
     eac:	0f 5f       	subi	r16, 0xFF	; 255
     eae:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t device_id = 0xC8;
	uint8_t read_config_status = sha204e_read_config_zone(device_id, config_data);

	printf("Config zone:\n\r");
	if (read_config_status == SHA204_SUCCESS) {
		for (int i = 0; i < 88; i++) {
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <main+0x2b6>
     ebe:	00 e0       	ldi	r16, 0x00	; 0
     ec0:	10 e0       	ldi	r17, 0x00	; 0
     ec2:	08 35       	cpi	r16, 0x58	; 88
     ec4:	11 05       	cpc	r17, r1
     ec6:	14 f3       	brlt	.-60     	; 0xe8c <main+0x280>
     ec8:	0b c0       	rjmp	.+22     	; 0xee0 <main+0x2d4>
     eca:	1f 92       	push	r1
     ecc:	1f 93       	push	r17
			printf("Byte %d: 0x%02X\n\r", i, config_data[i]);
		}
	} else {
		printf("Error reading config zone! %d", read_config_status);
     ece:	82 e3       	ldi	r24, 0x32	; 50
     ed0:	94 e0       	ldi	r25, 0x04	; 4
     ed2:	9f 93       	push	r25
     ed4:	8f 93       	push	r24
     ed6:	c0 d0       	rcall	.+384    	; 0x1058 <printf>
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	7e 01       	movw	r14, r28
	
	uint8_t write_tx_buffer[SHA204_COUNT_IDX + SHA204_ZONE_ACCESS_32 + WRITE_MAC_SIZE + SHA204_CRC_SIZE];
	uint8_t write_rx_buffer[WRITE_RSP_SIZE];
	uint8_t write_zone = SHA204_ZONE_DATA;
	uint16_t write_address = 0x0000;
	uint8_t mac[WRITE_MAC_SIZE] = {0};
     ee2:	98 ea       	ldi	r25, 0xA8	; 168
     ee4:	e9 1a       	sub	r14, r25
     ee6:	9e ef       	ldi	r25, 0xFE	; 254
     ee8:	f9 0a       	sbc	r15, r25
     eea:	80 e2       	ldi	r24, 0x20	; 32
     eec:	f7 01       	movw	r30, r14
     eee:	11 92       	st	Z+, r1
     ef0:	8a 95       	dec	r24
     ef2:	e9 f7       	brne	.-6      	; 0xeee <main+0x2e2>
		
	uint8_t write_data_status = sha204m_write(write_tx_buffer, write_rx_buffer, write_zone, write_address, random_number, mac);
     ef4:	8e 01       	movw	r16, r28
     ef6:	0f 56       	subi	r16, 0x6F	; 111
     ef8:	1f 4f       	sbci	r17, 0xFF	; 255
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	42 e0       	ldi	r20, 0x02	; 2
     f00:	be 01       	movw	r22, r28
     f02:	6c 5a       	subi	r22, 0xAC	; 172
     f04:	7e 4f       	sbci	r23, 0xFE	; 254
     f06:	ce 01       	movw	r24, r28
     f08:	8e 5e       	subi	r24, 0xEE	; 238
     f0a:	9e 4f       	sbci	r25, 0xFE	; 254
     f0c:	e8 da       	rcall	.-2608   	; 0x4de <sha204m_write>
	
	if (write_data_status == SHA204_SUCCESS) {
     f0e:	81 11       	cpse	r24, r1
     f10:	08 c0       	rjmp	.+16     	; 0xf22 <main+0x316>
		printf("Success writing data!");
     f12:	80 e5       	ldi	r24, 0x50	; 80
     f14:	94 e0       	ldi	r25, 0x04	; 4
     f16:	9f 93       	push	r25
     f18:	8f 93       	push	r24
     f1a:	9e d0       	rcall	.+316    	; 0x1058 <printf>
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0b c0       	rjmp	.+22     	; 0xf38 <main+0x32c>
     f22:	1f 92       	push	r1
	} else {
		printf("Error writing data zone! %d\n\r", write_data_status);
     f24:	8f 93       	push	r24
     f26:	86 e6       	ldi	r24, 0x66	; 102
     f28:	94 e0       	ldi	r25, 0x04	; 4
     f2a:	9f 93       	push	r25
     f2c:	8f 93       	push	r24
     f2e:	94 d0       	rcall	.+296    	; 0x1058 <printf>
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t read_tx_buffer[5];
    uint8_t read_rx_buffer[READ_32_RSP_SIZE];
    uint8_t read_zone = SHA204_ZONE_DATA;
    uint16_t read_address = 0x0000;
	
    uint8_t read_data_status = sha204m_read(read_tx_buffer, read_rx_buffer, read_zone, read_address);
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	42 e0       	ldi	r20, 0x02	; 2
     f3e:	be 01       	movw	r22, r28
     f40:	63 58       	subi	r22, 0x83	; 131
     f42:	7e 4f       	sbci	r23, 0xFE	; 254
     f44:	ce 01       	movw	r24, r28
     f46:	88 58       	subi	r24, 0x88	; 136
     f48:	9e 4f       	sbci	r25, 0xFE	; 254
     f4a:	87 da       	rcall	.-2802   	; 0x45a <sha204m_read>
     f4c:	88 23       	and	r24, r24
     f4e:	d1 f0       	breq	.+52     	; 0xf84 <main+0x378>

    if (read_data_status == SHA204_SUCCESS) {
     f50:	21 c0       	rjmp	.+66     	; 0xf94 <main+0x388>
     f52:	ed e7       	ldi	r30, 0x7D	; 125
     f54:	f1 e0       	ldi	r31, 0x01	; 1
        for (int i = 0; i < READ_32_RSP_SIZE; i++)
            printf("Byte %d: 0x%02X\n", i, read_rx_buffer[i]);
     f56:	ec 0f       	add	r30, r28
     f58:	fd 1f       	adc	r31, r29
     f5a:	e0 0f       	add	r30, r16
     f5c:	f1 1f       	adc	r31, r17
     f5e:	80 81       	ld	r24, Z
     f60:	1f 92       	push	r1
     f62:	8f 93       	push	r24
     f64:	1f 93       	push	r17
     f66:	0f 93       	push	r16
     f68:	84 e8       	ldi	r24, 0x84	; 132
     f6a:	94 e0       	ldi	r25, 0x04	; 4
     f6c:	9f 93       	push	r25
     f6e:	8f 93       	push	r24
     f70:	73 d0       	rcall	.+230    	; 0x1058 <printf>
     f72:	0f 5f       	subi	r16, 0xFF	; 255
     f74:	1f 4f       	sbci	r17, 0xFF	; 255
    uint16_t read_address = 0x0000;
	
    uint8_t read_data_status = sha204m_read(read_tx_buffer, read_rx_buffer, read_zone, read_address);

    if (read_data_status == SHA204_SUCCESS) {
        for (int i = 0; i < READ_32_RSP_SIZE; i++)
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <main+0x37c>
     f84:	00 e0       	ldi	r16, 0x00	; 0
     f86:	10 e0       	ldi	r17, 0x00	; 0
     f88:	03 32       	cpi	r16, 0x23	; 35
     f8a:	11 05       	cpc	r17, r1
     f8c:	14 f3       	brlt	.-60     	; 0xf52 <main+0x346>
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
            printf("Byte %d: 0x%02X\n", i, read_rx_buffer[i]);
    } else {
        printf("Error reading data zone! %d\n\r", read_data_status);
    }
	
	return 0;
     f92:	0d c0       	rjmp	.+26     	; 0xfae <main+0x3a2>
     f94:	1f 92       	push	r1
     f96:	8f 93       	push	r24

    if (read_data_status == SHA204_SUCCESS) {
        for (int i = 0; i < READ_32_RSP_SIZE; i++)
            printf("Byte %d: 0x%02X\n", i, read_rx_buffer[i]);
    } else {
        printf("Error reading data zone! %d\n\r", read_data_status);
     f98:	85 e9       	ldi	r24, 0x95	; 149
     f9a:	94 e0       	ldi	r25, 0x04	; 4
     f9c:	9f 93       	push	r25
     f9e:	8f 93       	push	r24
     fa0:	5b d0       	rcall	.+182    	; 0x1058 <printf>
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	c1 56       	subi	r28, 0x61	; 97
    }
	
	return 0;
     fb0:	de 4f       	sbci	r29, 0xFE	; 254
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	08 95       	ret

00000fca <__divmodsi4>:
     fca:	05 2e       	mov	r0, r21
     fcc:	97 fb       	bst	r25, 7
     fce:	16 f4       	brtc	.+4      	; 0xfd4 <__divmodsi4+0xa>
     fd0:	00 94       	com	r0
     fd2:	0f d0       	rcall	.+30     	; 0xff2 <__negsi2>
     fd4:	57 fd       	sbrc	r21, 7
     fd6:	05 d0       	rcall	.+10     	; 0xfe2 <__divmodsi4_neg2>
     fd8:	14 d0       	rcall	.+40     	; 0x1002 <__udivmodsi4>
     fda:	07 fc       	sbrc	r0, 7
     fdc:	02 d0       	rcall	.+4      	; 0xfe2 <__divmodsi4_neg2>
     fde:	46 f4       	brtc	.+16     	; 0xff0 <__divmodsi4_exit>
     fe0:	08 c0       	rjmp	.+16     	; 0xff2 <__negsi2>

00000fe2 <__divmodsi4_neg2>:
     fe2:	50 95       	com	r21
     fe4:	40 95       	com	r20
     fe6:	30 95       	com	r19
     fe8:	21 95       	neg	r18
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	4f 4f       	sbci	r20, 0xFF	; 255
     fee:	5f 4f       	sbci	r21, 0xFF	; 255

00000ff0 <__divmodsi4_exit>:
     ff0:	08 95       	ret

00000ff2 <__negsi2>:
     ff2:	90 95       	com	r25
     ff4:	80 95       	com	r24
     ff6:	70 95       	com	r23
     ff8:	61 95       	neg	r22
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	8f 4f       	sbci	r24, 0xFF	; 255
     ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    1000:	08 95       	ret

00001002 <__udivmodsi4>:
    1002:	a1 e2       	ldi	r26, 0x21	; 33
    1004:	1a 2e       	mov	r1, r26
    1006:	aa 1b       	sub	r26, r26
    1008:	bb 1b       	sub	r27, r27
    100a:	fd 01       	movw	r30, r26
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__udivmodsi4_ep>

0000100e <__udivmodsi4_loop>:
    100e:	aa 1f       	adc	r26, r26
    1010:	bb 1f       	adc	r27, r27
    1012:	ee 1f       	adc	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	a2 17       	cp	r26, r18
    1018:	b3 07       	cpc	r27, r19
    101a:	e4 07       	cpc	r30, r20
    101c:	f5 07       	cpc	r31, r21
    101e:	20 f0       	brcs	.+8      	; 0x1028 <__udivmodsi4_ep>
    1020:	a2 1b       	sub	r26, r18
    1022:	b3 0b       	sbc	r27, r19
    1024:	e4 0b       	sbc	r30, r20
    1026:	f5 0b       	sbc	r31, r21

00001028 <__udivmodsi4_ep>:
    1028:	66 1f       	adc	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	88 1f       	adc	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	1a 94       	dec	r1
    1032:	69 f7       	brne	.-38     	; 0x100e <__udivmodsi4_loop>
    1034:	60 95       	com	r22
    1036:	70 95       	com	r23
    1038:	80 95       	com	r24
    103a:	90 95       	com	r25
    103c:	9b 01       	movw	r18, r22
    103e:	ac 01       	movw	r20, r24
    1040:	bd 01       	movw	r22, r26
    1042:	cf 01       	movw	r24, r30
    1044:	08 95       	ret

00001046 <memcpy>:
    1046:	fb 01       	movw	r30, r22
    1048:	dc 01       	movw	r26, r24
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <memcpy+0xa>
    104c:	01 90       	ld	r0, Z+
    104e:	0d 92       	st	X+, r0
    1050:	41 50       	subi	r20, 0x01	; 1
    1052:	50 40       	sbci	r21, 0x00	; 0
    1054:	d8 f7       	brcc	.-10     	; 0x104c <memcpy+0x6>
    1056:	08 95       	ret

00001058 <printf>:
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	ae 01       	movw	r20, r28
    1062:	4a 5f       	subi	r20, 0xFA	; 250
    1064:	5f 4f       	sbci	r21, 0xFF	; 255
    1066:	fa 01       	movw	r30, r20
    1068:	61 91       	ld	r22, Z+
    106a:	71 91       	ld	r23, Z+
    106c:	af 01       	movw	r20, r30
    106e:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <__iob+0x2>
    1072:	90 91 b8 04 	lds	r25, 0x04B8	; 0x8004b8 <__iob+0x3>
    1076:	03 d0       	rcall	.+6      	; 0x107e <vfprintf>
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <vfprintf>:
    107e:	2f 92       	push	r2
    1080:	3f 92       	push	r3
    1082:	4f 92       	push	r4
    1084:	5f 92       	push	r5
    1086:	6f 92       	push	r6
    1088:	7f 92       	push	r7
    108a:	8f 92       	push	r8
    108c:	9f 92       	push	r9
    108e:	af 92       	push	r10
    1090:	bf 92       	push	r11
    1092:	cf 92       	push	r12
    1094:	df 92       	push	r13
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	2b 97       	sbiw	r28, 0x0b	; 11
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	6c 01       	movw	r12, r24
    10b4:	7b 01       	movw	r14, r22
    10b6:	8a 01       	movw	r16, r20
    10b8:	fc 01       	movw	r30, r24
    10ba:	17 82       	std	Z+7, r1	; 0x07
    10bc:	16 82       	std	Z+6, r1	; 0x06
    10be:	83 81       	ldd	r24, Z+3	; 0x03
    10c0:	81 ff       	sbrs	r24, 1
    10c2:	bf c1       	rjmp	.+894    	; 0x1442 <vfprintf+0x3c4>
    10c4:	ce 01       	movw	r24, r28
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	3c 01       	movw	r6, r24
    10ca:	f6 01       	movw	r30, r12
    10cc:	93 81       	ldd	r25, Z+3	; 0x03
    10ce:	f7 01       	movw	r30, r14
    10d0:	93 fd       	sbrc	r25, 3
    10d2:	85 91       	lpm	r24, Z+
    10d4:	93 ff       	sbrs	r25, 3
    10d6:	81 91       	ld	r24, Z+
    10d8:	7f 01       	movw	r14, r30
    10da:	88 23       	and	r24, r24
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <vfprintf+0x62>
    10de:	ad c1       	rjmp	.+858    	; 0x143a <vfprintf+0x3bc>
    10e0:	85 32       	cpi	r24, 0x25	; 37
    10e2:	39 f4       	brne	.+14     	; 0x10f2 <vfprintf+0x74>
    10e4:	93 fd       	sbrc	r25, 3
    10e6:	85 91       	lpm	r24, Z+
    10e8:	93 ff       	sbrs	r25, 3
    10ea:	81 91       	ld	r24, Z+
    10ec:	7f 01       	movw	r14, r30
    10ee:	85 32       	cpi	r24, 0x25	; 37
    10f0:	21 f4       	brne	.+8      	; 0x10fa <vfprintf+0x7c>
    10f2:	b6 01       	movw	r22, r12
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	d6 d1       	rcall	.+940    	; 0x14a4 <fputc>
    10f8:	e8 cf       	rjmp	.-48     	; 0x10ca <vfprintf+0x4c>
    10fa:	91 2c       	mov	r9, r1
    10fc:	21 2c       	mov	r2, r1
    10fe:	31 2c       	mov	r3, r1
    1100:	ff e1       	ldi	r31, 0x1F	; 31
    1102:	f3 15       	cp	r31, r3
    1104:	d8 f0       	brcs	.+54     	; 0x113c <vfprintf+0xbe>
    1106:	8b 32       	cpi	r24, 0x2B	; 43
    1108:	79 f0       	breq	.+30     	; 0x1128 <vfprintf+0xaa>
    110a:	38 f4       	brcc	.+14     	; 0x111a <vfprintf+0x9c>
    110c:	80 32       	cpi	r24, 0x20	; 32
    110e:	79 f0       	breq	.+30     	; 0x112e <vfprintf+0xb0>
    1110:	83 32       	cpi	r24, 0x23	; 35
    1112:	a1 f4       	brne	.+40     	; 0x113c <vfprintf+0xbe>
    1114:	23 2d       	mov	r18, r3
    1116:	20 61       	ori	r18, 0x10	; 16
    1118:	1d c0       	rjmp	.+58     	; 0x1154 <vfprintf+0xd6>
    111a:	8d 32       	cpi	r24, 0x2D	; 45
    111c:	61 f0       	breq	.+24     	; 0x1136 <vfprintf+0xb8>
    111e:	80 33       	cpi	r24, 0x30	; 48
    1120:	69 f4       	brne	.+26     	; 0x113c <vfprintf+0xbe>
    1122:	23 2d       	mov	r18, r3
    1124:	21 60       	ori	r18, 0x01	; 1
    1126:	16 c0       	rjmp	.+44     	; 0x1154 <vfprintf+0xd6>
    1128:	83 2d       	mov	r24, r3
    112a:	82 60       	ori	r24, 0x02	; 2
    112c:	38 2e       	mov	r3, r24
    112e:	e3 2d       	mov	r30, r3
    1130:	e4 60       	ori	r30, 0x04	; 4
    1132:	3e 2e       	mov	r3, r30
    1134:	2a c0       	rjmp	.+84     	; 0x118a <vfprintf+0x10c>
    1136:	f3 2d       	mov	r31, r3
    1138:	f8 60       	ori	r31, 0x08	; 8
    113a:	1d c0       	rjmp	.+58     	; 0x1176 <vfprintf+0xf8>
    113c:	37 fc       	sbrc	r3, 7
    113e:	2d c0       	rjmp	.+90     	; 0x119a <vfprintf+0x11c>
    1140:	20 ed       	ldi	r18, 0xD0	; 208
    1142:	28 0f       	add	r18, r24
    1144:	2a 30       	cpi	r18, 0x0A	; 10
    1146:	40 f0       	brcs	.+16     	; 0x1158 <vfprintf+0xda>
    1148:	8e 32       	cpi	r24, 0x2E	; 46
    114a:	b9 f4       	brne	.+46     	; 0x117a <vfprintf+0xfc>
    114c:	36 fc       	sbrc	r3, 6
    114e:	75 c1       	rjmp	.+746    	; 0x143a <vfprintf+0x3bc>
    1150:	23 2d       	mov	r18, r3
    1152:	20 64       	ori	r18, 0x40	; 64
    1154:	32 2e       	mov	r3, r18
    1156:	19 c0       	rjmp	.+50     	; 0x118a <vfprintf+0x10c>
    1158:	36 fe       	sbrs	r3, 6
    115a:	06 c0       	rjmp	.+12     	; 0x1168 <vfprintf+0xea>
    115c:	8a e0       	ldi	r24, 0x0A	; 10
    115e:	98 9e       	mul	r9, r24
    1160:	20 0d       	add	r18, r0
    1162:	11 24       	eor	r1, r1
    1164:	92 2e       	mov	r9, r18
    1166:	11 c0       	rjmp	.+34     	; 0x118a <vfprintf+0x10c>
    1168:	ea e0       	ldi	r30, 0x0A	; 10
    116a:	2e 9e       	mul	r2, r30
    116c:	20 0d       	add	r18, r0
    116e:	11 24       	eor	r1, r1
    1170:	22 2e       	mov	r2, r18
    1172:	f3 2d       	mov	r31, r3
    1174:	f0 62       	ori	r31, 0x20	; 32
    1176:	3f 2e       	mov	r3, r31
    1178:	08 c0       	rjmp	.+16     	; 0x118a <vfprintf+0x10c>
    117a:	8c 36       	cpi	r24, 0x6C	; 108
    117c:	21 f4       	brne	.+8      	; 0x1186 <vfprintf+0x108>
    117e:	83 2d       	mov	r24, r3
    1180:	80 68       	ori	r24, 0x80	; 128
    1182:	38 2e       	mov	r3, r24
    1184:	02 c0       	rjmp	.+4      	; 0x118a <vfprintf+0x10c>
    1186:	88 36       	cpi	r24, 0x68	; 104
    1188:	41 f4       	brne	.+16     	; 0x119a <vfprintf+0x11c>
    118a:	f7 01       	movw	r30, r14
    118c:	93 fd       	sbrc	r25, 3
    118e:	85 91       	lpm	r24, Z+
    1190:	93 ff       	sbrs	r25, 3
    1192:	81 91       	ld	r24, Z+
    1194:	7f 01       	movw	r14, r30
    1196:	81 11       	cpse	r24, r1
    1198:	b3 cf       	rjmp	.-154    	; 0x1100 <vfprintf+0x82>
    119a:	98 2f       	mov	r25, r24
    119c:	9f 7d       	andi	r25, 0xDF	; 223
    119e:	95 54       	subi	r25, 0x45	; 69
    11a0:	93 30       	cpi	r25, 0x03	; 3
    11a2:	28 f4       	brcc	.+10     	; 0x11ae <vfprintf+0x130>
    11a4:	0c 5f       	subi	r16, 0xFC	; 252
    11a6:	1f 4f       	sbci	r17, 0xFF	; 255
    11a8:	9f e3       	ldi	r25, 0x3F	; 63
    11aa:	99 83       	std	Y+1, r25	; 0x01
    11ac:	0d c0       	rjmp	.+26     	; 0x11c8 <vfprintf+0x14a>
    11ae:	83 36       	cpi	r24, 0x63	; 99
    11b0:	31 f0       	breq	.+12     	; 0x11be <vfprintf+0x140>
    11b2:	83 37       	cpi	r24, 0x73	; 115
    11b4:	71 f0       	breq	.+28     	; 0x11d2 <vfprintf+0x154>
    11b6:	83 35       	cpi	r24, 0x53	; 83
    11b8:	09 f0       	breq	.+2      	; 0x11bc <vfprintf+0x13e>
    11ba:	55 c0       	rjmp	.+170    	; 0x1266 <vfprintf+0x1e8>
    11bc:	20 c0       	rjmp	.+64     	; 0x11fe <vfprintf+0x180>
    11be:	f8 01       	movw	r30, r16
    11c0:	80 81       	ld	r24, Z
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	0e 5f       	subi	r16, 0xFE	; 254
    11c6:	1f 4f       	sbci	r17, 0xFF	; 255
    11c8:	88 24       	eor	r8, r8
    11ca:	83 94       	inc	r8
    11cc:	91 2c       	mov	r9, r1
    11ce:	53 01       	movw	r10, r6
    11d0:	12 c0       	rjmp	.+36     	; 0x11f6 <vfprintf+0x178>
    11d2:	28 01       	movw	r4, r16
    11d4:	f2 e0       	ldi	r31, 0x02	; 2
    11d6:	4f 0e       	add	r4, r31
    11d8:	51 1c       	adc	r5, r1
    11da:	f8 01       	movw	r30, r16
    11dc:	a0 80       	ld	r10, Z
    11de:	b1 80       	ldd	r11, Z+1	; 0x01
    11e0:	36 fe       	sbrs	r3, 6
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <vfprintf+0x16c>
    11e4:	69 2d       	mov	r22, r9
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <vfprintf+0x170>
    11ea:	6f ef       	ldi	r22, 0xFF	; 255
    11ec:	7f ef       	ldi	r23, 0xFF	; 255
    11ee:	c5 01       	movw	r24, r10
    11f0:	4e d1       	rcall	.+668    	; 0x148e <strnlen>
    11f2:	4c 01       	movw	r8, r24
    11f4:	82 01       	movw	r16, r4
    11f6:	f3 2d       	mov	r31, r3
    11f8:	ff 77       	andi	r31, 0x7F	; 127
    11fa:	3f 2e       	mov	r3, r31
    11fc:	15 c0       	rjmp	.+42     	; 0x1228 <vfprintf+0x1aa>
    11fe:	28 01       	movw	r4, r16
    1200:	22 e0       	ldi	r18, 0x02	; 2
    1202:	42 0e       	add	r4, r18
    1204:	51 1c       	adc	r5, r1
    1206:	f8 01       	movw	r30, r16
    1208:	a0 80       	ld	r10, Z
    120a:	b1 80       	ldd	r11, Z+1	; 0x01
    120c:	36 fe       	sbrs	r3, 6
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <vfprintf+0x198>
    1210:	69 2d       	mov	r22, r9
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	02 c0       	rjmp	.+4      	; 0x121a <vfprintf+0x19c>
    1216:	6f ef       	ldi	r22, 0xFF	; 255
    1218:	7f ef       	ldi	r23, 0xFF	; 255
    121a:	c5 01       	movw	r24, r10
    121c:	2d d1       	rcall	.+602    	; 0x1478 <strnlen_P>
    121e:	4c 01       	movw	r8, r24
    1220:	f3 2d       	mov	r31, r3
    1222:	f0 68       	ori	r31, 0x80	; 128
    1224:	3f 2e       	mov	r3, r31
    1226:	82 01       	movw	r16, r4
    1228:	33 fc       	sbrc	r3, 3
    122a:	19 c0       	rjmp	.+50     	; 0x125e <vfprintf+0x1e0>
    122c:	82 2d       	mov	r24, r2
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	88 16       	cp	r8, r24
    1232:	99 06       	cpc	r9, r25
    1234:	a0 f4       	brcc	.+40     	; 0x125e <vfprintf+0x1e0>
    1236:	b6 01       	movw	r22, r12
    1238:	80 e2       	ldi	r24, 0x20	; 32
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	33 d1       	rcall	.+614    	; 0x14a4 <fputc>
    123e:	2a 94       	dec	r2
    1240:	f5 cf       	rjmp	.-22     	; 0x122c <vfprintf+0x1ae>
    1242:	f5 01       	movw	r30, r10
    1244:	37 fc       	sbrc	r3, 7
    1246:	85 91       	lpm	r24, Z+
    1248:	37 fe       	sbrs	r3, 7
    124a:	81 91       	ld	r24, Z+
    124c:	5f 01       	movw	r10, r30
    124e:	b6 01       	movw	r22, r12
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	28 d1       	rcall	.+592    	; 0x14a4 <fputc>
    1254:	21 10       	cpse	r2, r1
    1256:	2a 94       	dec	r2
    1258:	21 e0       	ldi	r18, 0x01	; 1
    125a:	82 1a       	sub	r8, r18
    125c:	91 08       	sbc	r9, r1
    125e:	81 14       	cp	r8, r1
    1260:	91 04       	cpc	r9, r1
    1262:	79 f7       	brne	.-34     	; 0x1242 <vfprintf+0x1c4>
    1264:	e1 c0       	rjmp	.+450    	; 0x1428 <vfprintf+0x3aa>
    1266:	84 36       	cpi	r24, 0x64	; 100
    1268:	11 f0       	breq	.+4      	; 0x126e <vfprintf+0x1f0>
    126a:	89 36       	cpi	r24, 0x69	; 105
    126c:	39 f5       	brne	.+78     	; 0x12bc <vfprintf+0x23e>
    126e:	f8 01       	movw	r30, r16
    1270:	37 fe       	sbrs	r3, 7
    1272:	07 c0       	rjmp	.+14     	; 0x1282 <vfprintf+0x204>
    1274:	60 81       	ld	r22, Z
    1276:	71 81       	ldd	r23, Z+1	; 0x01
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	93 81       	ldd	r25, Z+3	; 0x03
    127c:	0c 5f       	subi	r16, 0xFC	; 252
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	08 c0       	rjmp	.+16     	; 0x1292 <vfprintf+0x214>
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	07 2e       	mov	r0, r23
    1288:	00 0c       	add	r0, r0
    128a:	88 0b       	sbc	r24, r24
    128c:	99 0b       	sbc	r25, r25
    128e:	0e 5f       	subi	r16, 0xFE	; 254
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
    1292:	f3 2d       	mov	r31, r3
    1294:	ff 76       	andi	r31, 0x6F	; 111
    1296:	3f 2e       	mov	r3, r31
    1298:	97 ff       	sbrs	r25, 7
    129a:	09 c0       	rjmp	.+18     	; 0x12ae <vfprintf+0x230>
    129c:	90 95       	com	r25
    129e:	80 95       	com	r24
    12a0:	70 95       	com	r23
    12a2:	61 95       	neg	r22
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	8f 4f       	sbci	r24, 0xFF	; 255
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	f0 68       	ori	r31, 0x80	; 128
    12ac:	3f 2e       	mov	r3, r31
    12ae:	2a e0       	ldi	r18, 0x0A	; 10
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	a3 01       	movw	r20, r6
    12b4:	33 d1       	rcall	.+614    	; 0x151c <__ultoa_invert>
    12b6:	88 2e       	mov	r8, r24
    12b8:	86 18       	sub	r8, r6
    12ba:	44 c0       	rjmp	.+136    	; 0x1344 <vfprintf+0x2c6>
    12bc:	85 37       	cpi	r24, 0x75	; 117
    12be:	31 f4       	brne	.+12     	; 0x12cc <vfprintf+0x24e>
    12c0:	23 2d       	mov	r18, r3
    12c2:	2f 7e       	andi	r18, 0xEF	; 239
    12c4:	b2 2e       	mov	r11, r18
    12c6:	2a e0       	ldi	r18, 0x0A	; 10
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	25 c0       	rjmp	.+74     	; 0x1316 <vfprintf+0x298>
    12cc:	93 2d       	mov	r25, r3
    12ce:	99 7f       	andi	r25, 0xF9	; 249
    12d0:	b9 2e       	mov	r11, r25
    12d2:	8f 36       	cpi	r24, 0x6F	; 111
    12d4:	c1 f0       	breq	.+48     	; 0x1306 <vfprintf+0x288>
    12d6:	18 f4       	brcc	.+6      	; 0x12de <vfprintf+0x260>
    12d8:	88 35       	cpi	r24, 0x58	; 88
    12da:	79 f0       	breq	.+30     	; 0x12fa <vfprintf+0x27c>
    12dc:	ae c0       	rjmp	.+348    	; 0x143a <vfprintf+0x3bc>
    12de:	80 37       	cpi	r24, 0x70	; 112
    12e0:	19 f0       	breq	.+6      	; 0x12e8 <vfprintf+0x26a>
    12e2:	88 37       	cpi	r24, 0x78	; 120
    12e4:	21 f0       	breq	.+8      	; 0x12ee <vfprintf+0x270>
    12e6:	a9 c0       	rjmp	.+338    	; 0x143a <vfprintf+0x3bc>
    12e8:	e9 2f       	mov	r30, r25
    12ea:	e0 61       	ori	r30, 0x10	; 16
    12ec:	be 2e       	mov	r11, r30
    12ee:	b4 fe       	sbrs	r11, 4
    12f0:	0d c0       	rjmp	.+26     	; 0x130c <vfprintf+0x28e>
    12f2:	fb 2d       	mov	r31, r11
    12f4:	f4 60       	ori	r31, 0x04	; 4
    12f6:	bf 2e       	mov	r11, r31
    12f8:	09 c0       	rjmp	.+18     	; 0x130c <vfprintf+0x28e>
    12fa:	34 fe       	sbrs	r3, 4
    12fc:	0a c0       	rjmp	.+20     	; 0x1312 <vfprintf+0x294>
    12fe:	29 2f       	mov	r18, r25
    1300:	26 60       	ori	r18, 0x06	; 6
    1302:	b2 2e       	mov	r11, r18
    1304:	06 c0       	rjmp	.+12     	; 0x1312 <vfprintf+0x294>
    1306:	28 e0       	ldi	r18, 0x08	; 8
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <vfprintf+0x298>
    130c:	20 e1       	ldi	r18, 0x10	; 16
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <vfprintf+0x298>
    1312:	20 e1       	ldi	r18, 0x10	; 16
    1314:	32 e0       	ldi	r19, 0x02	; 2
    1316:	f8 01       	movw	r30, r16
    1318:	b7 fe       	sbrs	r11, 7
    131a:	07 c0       	rjmp	.+14     	; 0x132a <vfprintf+0x2ac>
    131c:	60 81       	ld	r22, Z
    131e:	71 81       	ldd	r23, Z+1	; 0x01
    1320:	82 81       	ldd	r24, Z+2	; 0x02
    1322:	93 81       	ldd	r25, Z+3	; 0x03
    1324:	0c 5f       	subi	r16, 0xFC	; 252
    1326:	1f 4f       	sbci	r17, 0xFF	; 255
    1328:	06 c0       	rjmp	.+12     	; 0x1336 <vfprintf+0x2b8>
    132a:	60 81       	ld	r22, Z
    132c:	71 81       	ldd	r23, Z+1	; 0x01
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 5f       	subi	r16, 0xFE	; 254
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	a3 01       	movw	r20, r6
    1338:	f1 d0       	rcall	.+482    	; 0x151c <__ultoa_invert>
    133a:	88 2e       	mov	r8, r24
    133c:	86 18       	sub	r8, r6
    133e:	fb 2d       	mov	r31, r11
    1340:	ff 77       	andi	r31, 0x7F	; 127
    1342:	3f 2e       	mov	r3, r31
    1344:	36 fe       	sbrs	r3, 6
    1346:	0d c0       	rjmp	.+26     	; 0x1362 <vfprintf+0x2e4>
    1348:	23 2d       	mov	r18, r3
    134a:	2e 7f       	andi	r18, 0xFE	; 254
    134c:	a2 2e       	mov	r10, r18
    134e:	89 14       	cp	r8, r9
    1350:	58 f4       	brcc	.+22     	; 0x1368 <vfprintf+0x2ea>
    1352:	34 fe       	sbrs	r3, 4
    1354:	0b c0       	rjmp	.+22     	; 0x136c <vfprintf+0x2ee>
    1356:	32 fc       	sbrc	r3, 2
    1358:	09 c0       	rjmp	.+18     	; 0x136c <vfprintf+0x2ee>
    135a:	83 2d       	mov	r24, r3
    135c:	8e 7e       	andi	r24, 0xEE	; 238
    135e:	a8 2e       	mov	r10, r24
    1360:	05 c0       	rjmp	.+10     	; 0x136c <vfprintf+0x2ee>
    1362:	b8 2c       	mov	r11, r8
    1364:	a3 2c       	mov	r10, r3
    1366:	03 c0       	rjmp	.+6      	; 0x136e <vfprintf+0x2f0>
    1368:	b8 2c       	mov	r11, r8
    136a:	01 c0       	rjmp	.+2      	; 0x136e <vfprintf+0x2f0>
    136c:	b9 2c       	mov	r11, r9
    136e:	a4 fe       	sbrs	r10, 4
    1370:	0f c0       	rjmp	.+30     	; 0x1390 <vfprintf+0x312>
    1372:	fe 01       	movw	r30, r28
    1374:	e8 0d       	add	r30, r8
    1376:	f1 1d       	adc	r31, r1
    1378:	80 81       	ld	r24, Z
    137a:	80 33       	cpi	r24, 0x30	; 48
    137c:	21 f4       	brne	.+8      	; 0x1386 <vfprintf+0x308>
    137e:	9a 2d       	mov	r25, r10
    1380:	99 7e       	andi	r25, 0xE9	; 233
    1382:	a9 2e       	mov	r10, r25
    1384:	09 c0       	rjmp	.+18     	; 0x1398 <vfprintf+0x31a>
    1386:	a2 fe       	sbrs	r10, 2
    1388:	06 c0       	rjmp	.+12     	; 0x1396 <vfprintf+0x318>
    138a:	b3 94       	inc	r11
    138c:	b3 94       	inc	r11
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <vfprintf+0x31a>
    1390:	8a 2d       	mov	r24, r10
    1392:	86 78       	andi	r24, 0x86	; 134
    1394:	09 f0       	breq	.+2      	; 0x1398 <vfprintf+0x31a>
    1396:	b3 94       	inc	r11
    1398:	a3 fc       	sbrc	r10, 3
    139a:	10 c0       	rjmp	.+32     	; 0x13bc <vfprintf+0x33e>
    139c:	a0 fe       	sbrs	r10, 0
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <vfprintf+0x32e>
    13a0:	b2 14       	cp	r11, r2
    13a2:	80 f4       	brcc	.+32     	; 0x13c4 <vfprintf+0x346>
    13a4:	28 0c       	add	r2, r8
    13a6:	92 2c       	mov	r9, r2
    13a8:	9b 18       	sub	r9, r11
    13aa:	0d c0       	rjmp	.+26     	; 0x13c6 <vfprintf+0x348>
    13ac:	b2 14       	cp	r11, r2
    13ae:	58 f4       	brcc	.+22     	; 0x13c6 <vfprintf+0x348>
    13b0:	b6 01       	movw	r22, r12
    13b2:	80 e2       	ldi	r24, 0x20	; 32
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	76 d0       	rcall	.+236    	; 0x14a4 <fputc>
    13b8:	b3 94       	inc	r11
    13ba:	f8 cf       	rjmp	.-16     	; 0x13ac <vfprintf+0x32e>
    13bc:	b2 14       	cp	r11, r2
    13be:	18 f4       	brcc	.+6      	; 0x13c6 <vfprintf+0x348>
    13c0:	2b 18       	sub	r2, r11
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <vfprintf+0x34a>
    13c4:	98 2c       	mov	r9, r8
    13c6:	21 2c       	mov	r2, r1
    13c8:	a4 fe       	sbrs	r10, 4
    13ca:	0f c0       	rjmp	.+30     	; 0x13ea <vfprintf+0x36c>
    13cc:	b6 01       	movw	r22, r12
    13ce:	80 e3       	ldi	r24, 0x30	; 48
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	68 d0       	rcall	.+208    	; 0x14a4 <fputc>
    13d4:	a2 fe       	sbrs	r10, 2
    13d6:	16 c0       	rjmp	.+44     	; 0x1404 <vfprintf+0x386>
    13d8:	a1 fc       	sbrc	r10, 1
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <vfprintf+0x364>
    13dc:	88 e7       	ldi	r24, 0x78	; 120
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <vfprintf+0x368>
    13e2:	88 e5       	ldi	r24, 0x58	; 88
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	b6 01       	movw	r22, r12
    13e8:	0c c0       	rjmp	.+24     	; 0x1402 <vfprintf+0x384>
    13ea:	8a 2d       	mov	r24, r10
    13ec:	86 78       	andi	r24, 0x86	; 134
    13ee:	51 f0       	breq	.+20     	; 0x1404 <vfprintf+0x386>
    13f0:	a1 fe       	sbrs	r10, 1
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <vfprintf+0x37a>
    13f4:	8b e2       	ldi	r24, 0x2B	; 43
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <vfprintf+0x37c>
    13f8:	80 e2       	ldi	r24, 0x20	; 32
    13fa:	a7 fc       	sbrc	r10, 7
    13fc:	8d e2       	ldi	r24, 0x2D	; 45
    13fe:	b6 01       	movw	r22, r12
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	50 d0       	rcall	.+160    	; 0x14a4 <fputc>
    1404:	89 14       	cp	r8, r9
    1406:	30 f4       	brcc	.+12     	; 0x1414 <vfprintf+0x396>
    1408:	b6 01       	movw	r22, r12
    140a:	80 e3       	ldi	r24, 0x30	; 48
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	4a d0       	rcall	.+148    	; 0x14a4 <fputc>
    1410:	9a 94       	dec	r9
    1412:	f8 cf       	rjmp	.-16     	; 0x1404 <vfprintf+0x386>
    1414:	8a 94       	dec	r8
    1416:	f3 01       	movw	r30, r6
    1418:	e8 0d       	add	r30, r8
    141a:	f1 1d       	adc	r31, r1
    141c:	80 81       	ld	r24, Z
    141e:	b6 01       	movw	r22, r12
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	40 d0       	rcall	.+128    	; 0x14a4 <fputc>
    1424:	81 10       	cpse	r8, r1
    1426:	f6 cf       	rjmp	.-20     	; 0x1414 <vfprintf+0x396>
    1428:	22 20       	and	r2, r2
    142a:	09 f4       	brne	.+2      	; 0x142e <vfprintf+0x3b0>
    142c:	4e ce       	rjmp	.-868    	; 0x10ca <vfprintf+0x4c>
    142e:	b6 01       	movw	r22, r12
    1430:	80 e2       	ldi	r24, 0x20	; 32
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	37 d0       	rcall	.+110    	; 0x14a4 <fputc>
    1436:	2a 94       	dec	r2
    1438:	f7 cf       	rjmp	.-18     	; 0x1428 <vfprintf+0x3aa>
    143a:	f6 01       	movw	r30, r12
    143c:	86 81       	ldd	r24, Z+6	; 0x06
    143e:	97 81       	ldd	r25, Z+7	; 0x07
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <vfprintf+0x3c8>
    1442:	8f ef       	ldi	r24, 0xFF	; 255
    1444:	9f ef       	ldi	r25, 0xFF	; 255
    1446:	2b 96       	adiw	r28, 0x0b	; 11
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	ff 90       	pop	r15
    145c:	ef 90       	pop	r14
    145e:	df 90       	pop	r13
    1460:	cf 90       	pop	r12
    1462:	bf 90       	pop	r11
    1464:	af 90       	pop	r10
    1466:	9f 90       	pop	r9
    1468:	8f 90       	pop	r8
    146a:	7f 90       	pop	r7
    146c:	6f 90       	pop	r6
    146e:	5f 90       	pop	r5
    1470:	4f 90       	pop	r4
    1472:	3f 90       	pop	r3
    1474:	2f 90       	pop	r2
    1476:	08 95       	ret

00001478 <strnlen_P>:
    1478:	fc 01       	movw	r30, r24
    147a:	05 90       	lpm	r0, Z+
    147c:	61 50       	subi	r22, 0x01	; 1
    147e:	70 40       	sbci	r23, 0x00	; 0
    1480:	01 10       	cpse	r0, r1
    1482:	d8 f7       	brcc	.-10     	; 0x147a <strnlen_P+0x2>
    1484:	80 95       	com	r24
    1486:	90 95       	com	r25
    1488:	8e 0f       	add	r24, r30
    148a:	9f 1f       	adc	r25, r31
    148c:	08 95       	ret

0000148e <strnlen>:
    148e:	fc 01       	movw	r30, r24
    1490:	61 50       	subi	r22, 0x01	; 1
    1492:	70 40       	sbci	r23, 0x00	; 0
    1494:	01 90       	ld	r0, Z+
    1496:	01 10       	cpse	r0, r1
    1498:	d8 f7       	brcc	.-10     	; 0x1490 <strnlen+0x2>
    149a:	80 95       	com	r24
    149c:	90 95       	com	r25
    149e:	8e 0f       	add	r24, r30
    14a0:	9f 1f       	adc	r25, r31
    14a2:	08 95       	ret

000014a4 <fputc>:
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	fb 01       	movw	r30, r22
    14ae:	23 81       	ldd	r18, Z+3	; 0x03
    14b0:	21 fd       	sbrc	r18, 1
    14b2:	03 c0       	rjmp	.+6      	; 0x14ba <fputc+0x16>
    14b4:	8f ef       	ldi	r24, 0xFF	; 255
    14b6:	9f ef       	ldi	r25, 0xFF	; 255
    14b8:	2c c0       	rjmp	.+88     	; 0x1512 <fputc+0x6e>
    14ba:	22 ff       	sbrs	r18, 2
    14bc:	16 c0       	rjmp	.+44     	; 0x14ea <fputc+0x46>
    14be:	46 81       	ldd	r20, Z+6	; 0x06
    14c0:	57 81       	ldd	r21, Z+7	; 0x07
    14c2:	24 81       	ldd	r18, Z+4	; 0x04
    14c4:	35 81       	ldd	r19, Z+5	; 0x05
    14c6:	42 17       	cp	r20, r18
    14c8:	53 07       	cpc	r21, r19
    14ca:	44 f4       	brge	.+16     	; 0x14dc <fputc+0x38>
    14cc:	a0 81       	ld	r26, Z
    14ce:	b1 81       	ldd	r27, Z+1	; 0x01
    14d0:	9d 01       	movw	r18, r26
    14d2:	2f 5f       	subi	r18, 0xFF	; 255
    14d4:	3f 4f       	sbci	r19, 0xFF	; 255
    14d6:	31 83       	std	Z+1, r19	; 0x01
    14d8:	20 83       	st	Z, r18
    14da:	8c 93       	st	X, r24
    14dc:	26 81       	ldd	r18, Z+6	; 0x06
    14de:	37 81       	ldd	r19, Z+7	; 0x07
    14e0:	2f 5f       	subi	r18, 0xFF	; 255
    14e2:	3f 4f       	sbci	r19, 0xFF	; 255
    14e4:	37 83       	std	Z+7, r19	; 0x07
    14e6:	26 83       	std	Z+6, r18	; 0x06
    14e8:	14 c0       	rjmp	.+40     	; 0x1512 <fputc+0x6e>
    14ea:	8b 01       	movw	r16, r22
    14ec:	ec 01       	movw	r28, r24
    14ee:	fb 01       	movw	r30, r22
    14f0:	00 84       	ldd	r0, Z+8	; 0x08
    14f2:	f1 85       	ldd	r31, Z+9	; 0x09
    14f4:	e0 2d       	mov	r30, r0
    14f6:	19 95       	eicall
    14f8:	89 2b       	or	r24, r25
    14fa:	e1 f6       	brne	.-72     	; 0x14b4 <fputc+0x10>
    14fc:	d8 01       	movw	r26, r16
    14fe:	16 96       	adiw	r26, 0x06	; 6
    1500:	8d 91       	ld	r24, X+
    1502:	9c 91       	ld	r25, X
    1504:	17 97       	sbiw	r26, 0x07	; 7
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	17 96       	adiw	r26, 0x07	; 7
    150a:	9c 93       	st	X, r25
    150c:	8e 93       	st	-X, r24
    150e:	16 97       	sbiw	r26, 0x06	; 6
    1510:	ce 01       	movw	r24, r28
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	08 95       	ret

0000151c <__ultoa_invert>:
    151c:	fa 01       	movw	r30, r20
    151e:	aa 27       	eor	r26, r26
    1520:	28 30       	cpi	r18, 0x08	; 8
    1522:	51 f1       	breq	.+84     	; 0x1578 <__ultoa_invert+0x5c>
    1524:	20 31       	cpi	r18, 0x10	; 16
    1526:	81 f1       	breq	.+96     	; 0x1588 <__ultoa_invert+0x6c>
    1528:	e8 94       	clt
    152a:	6f 93       	push	r22
    152c:	6e 7f       	andi	r22, 0xFE	; 254
    152e:	6e 5f       	subi	r22, 0xFE	; 254
    1530:	7f 4f       	sbci	r23, 0xFF	; 255
    1532:	8f 4f       	sbci	r24, 0xFF	; 255
    1534:	9f 4f       	sbci	r25, 0xFF	; 255
    1536:	af 4f       	sbci	r26, 0xFF	; 255
    1538:	b1 e0       	ldi	r27, 0x01	; 1
    153a:	3e d0       	rcall	.+124    	; 0x15b8 <__ultoa_invert+0x9c>
    153c:	b4 e0       	ldi	r27, 0x04	; 4
    153e:	3c d0       	rcall	.+120    	; 0x15b8 <__ultoa_invert+0x9c>
    1540:	67 0f       	add	r22, r23
    1542:	78 1f       	adc	r23, r24
    1544:	89 1f       	adc	r24, r25
    1546:	9a 1f       	adc	r25, r26
    1548:	a1 1d       	adc	r26, r1
    154a:	68 0f       	add	r22, r24
    154c:	79 1f       	adc	r23, r25
    154e:	8a 1f       	adc	r24, r26
    1550:	91 1d       	adc	r25, r1
    1552:	a1 1d       	adc	r26, r1
    1554:	6a 0f       	add	r22, r26
    1556:	71 1d       	adc	r23, r1
    1558:	81 1d       	adc	r24, r1
    155a:	91 1d       	adc	r25, r1
    155c:	a1 1d       	adc	r26, r1
    155e:	20 d0       	rcall	.+64     	; 0x15a0 <__ultoa_invert+0x84>
    1560:	09 f4       	brne	.+2      	; 0x1564 <__ultoa_invert+0x48>
    1562:	68 94       	set
    1564:	3f 91       	pop	r19
    1566:	2a e0       	ldi	r18, 0x0A	; 10
    1568:	26 9f       	mul	r18, r22
    156a:	11 24       	eor	r1, r1
    156c:	30 19       	sub	r19, r0
    156e:	30 5d       	subi	r19, 0xD0	; 208
    1570:	31 93       	st	Z+, r19
    1572:	de f6       	brtc	.-74     	; 0x152a <__ultoa_invert+0xe>
    1574:	cf 01       	movw	r24, r30
    1576:	08 95       	ret
    1578:	46 2f       	mov	r20, r22
    157a:	47 70       	andi	r20, 0x07	; 7
    157c:	40 5d       	subi	r20, 0xD0	; 208
    157e:	41 93       	st	Z+, r20
    1580:	b3 e0       	ldi	r27, 0x03	; 3
    1582:	0f d0       	rcall	.+30     	; 0x15a2 <__ultoa_invert+0x86>
    1584:	c9 f7       	brne	.-14     	; 0x1578 <__ultoa_invert+0x5c>
    1586:	f6 cf       	rjmp	.-20     	; 0x1574 <__ultoa_invert+0x58>
    1588:	46 2f       	mov	r20, r22
    158a:	4f 70       	andi	r20, 0x0F	; 15
    158c:	40 5d       	subi	r20, 0xD0	; 208
    158e:	4a 33       	cpi	r20, 0x3A	; 58
    1590:	18 f0       	brcs	.+6      	; 0x1598 <__ultoa_invert+0x7c>
    1592:	49 5d       	subi	r20, 0xD9	; 217
    1594:	31 fd       	sbrc	r19, 1
    1596:	40 52       	subi	r20, 0x20	; 32
    1598:	41 93       	st	Z+, r20
    159a:	02 d0       	rcall	.+4      	; 0x15a0 <__ultoa_invert+0x84>
    159c:	a9 f7       	brne	.-22     	; 0x1588 <__ultoa_invert+0x6c>
    159e:	ea cf       	rjmp	.-44     	; 0x1574 <__ultoa_invert+0x58>
    15a0:	b4 e0       	ldi	r27, 0x04	; 4
    15a2:	a6 95       	lsr	r26
    15a4:	97 95       	ror	r25
    15a6:	87 95       	ror	r24
    15a8:	77 95       	ror	r23
    15aa:	67 95       	ror	r22
    15ac:	ba 95       	dec	r27
    15ae:	c9 f7       	brne	.-14     	; 0x15a2 <__ultoa_invert+0x86>
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	61 05       	cpc	r22, r1
    15b4:	71 05       	cpc	r23, r1
    15b6:	08 95       	ret
    15b8:	9b 01       	movw	r18, r22
    15ba:	ac 01       	movw	r20, r24
    15bc:	0a 2e       	mov	r0, r26
    15be:	06 94       	lsr	r0
    15c0:	57 95       	ror	r21
    15c2:	47 95       	ror	r20
    15c4:	37 95       	ror	r19
    15c6:	27 95       	ror	r18
    15c8:	ba 95       	dec	r27
    15ca:	c9 f7       	brne	.-14     	; 0x15be <__ultoa_invert+0xa2>
    15cc:	62 0f       	add	r22, r18
    15ce:	73 1f       	adc	r23, r19
    15d0:	84 1f       	adc	r24, r20
    15d2:	95 1f       	adc	r25, r21
    15d4:	a0 1d       	adc	r26, r0
    15d6:	08 95       	ret

000015d8 <_exit>:
    15d8:	f8 94       	cli

000015da <__stop_program>:
    15da:	ff cf       	rjmp	.-2      	; 0x15da <__stop_program>
